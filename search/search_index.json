{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to LibLevelGen \u00b6 What's LibLevelGen? \u00b6 LibLevelGen is a library mod which aims to provide a level generation API for Crypt of the Necrodancer: SYNCHRONY . It can be installed using the built-in mod portal soon! Join the Synchrony Discord if you have any questions or just want to hang out!","title":"Welcome to LibLevelGen"},{"location":"#welcome-to-liblevelgen","text":"","title":"Welcome to LibLevelGen"},{"location":"#whats-liblevelgen","text":"LibLevelGen is a library mod which aims to provide a level generation API for Crypt of the Necrodancer: SYNCHRONY . It can be installed using the built-in mod portal soon! Join the Synchrony Discord if you have any questions or just want to hang out!","title":"What's LibLevelGen?"},{"location":"modules/Enemy.lua/","text":"Enemy.lua \u00b6 Functions \u00b6 enemy.getData \u00b6 enemy.getData(type: string): LibLevelGen.EnemyData Gets LibLevelGen data for the given enemy type. Parameters : type : string - Type from the enemy.Type enum Returns : LibLevelGen.EnemyData enemy.register \u00b6 enemy.register(entity: string, maxLevel: number, args: LibLevelGen.EnemyData): number Register LibLevelGen enemy data in the enemy enum. Parameters : entity : string - Entity base name maxLevel : number - Max level this entity can have args : LibLevelGen.EnemyData - Additional enemy definition data Returns : number Classes \u00b6 LibLevelGen.EnemyData \u00b6 Class containing data related to processing it by the various level generation components. Properties : entity : string - The base entity type maxLevel : number - Max level the entity type can have id : number[] - Numeric IDs for every level the entity has warRingUpgrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when ring of war is in effect warShrineUpgrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when shrine of war is in effect peaceRingDowngrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when ring of peace is in effect challengeCharacterDowngrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when playing a challenge character (Monk/Coda/Aria/Bolt - used to downgrade black bats into blue) Enums \u00b6 enemy.Type \u00b6 Enum containing enemy types and their associated data. Use enemy.getData to get data for a given enemy from this enum. Entries : King CoralRiff KingConga Deathmetal Fortissimole Necrodancer DeadRinger Frankensteinway Conductor LuteDragon Direbat Dragon Banshee Minotaur Nightmare Mommy Ogre Metrognome Armadillo Armoredskeleton Bat Beetle Bishop Blademaster Cauldron Clone Devil ElectricMage Evileye Fireelemental Iceelemental Ghast Ghost Ghoul Goblin GoblinBomber Golem Gorgon Harpy Hellhound Knight Lich Monkey Mushroom Orc Pawn Pixie Queen Rook Sarcophagus Shovemonster Skeleton Skeletonknight Skeletonmage Skull SleepingGoblin Slime Spider Tarmonster Tentacle Trapcouldron Trapchest Troll Warlock WaterBall Wight Wraith Yeti Zombie ZombieElectric ZombieSnake","title":"Enemy.lua"},{"location":"modules/Enemy.lua/#enemylua","text":"","title":"Enemy.lua"},{"location":"modules/Enemy.lua/#functions","text":"","title":"Functions"},{"location":"modules/Enemy.lua/#enemygetdata","text":"enemy.getData(type: string): LibLevelGen.EnemyData Gets LibLevelGen data for the given enemy type. Parameters : type : string - Type from the enemy.Type enum Returns : LibLevelGen.EnemyData","title":"enemy.getData"},{"location":"modules/Enemy.lua/#enemyregister","text":"enemy.register(entity: string, maxLevel: number, args: LibLevelGen.EnemyData): number Register LibLevelGen enemy data in the enemy enum. Parameters : entity : string - Entity base name maxLevel : number - Max level this entity can have args : LibLevelGen.EnemyData - Additional enemy definition data Returns : number","title":"enemy.register"},{"location":"modules/Enemy.lua/#classes","text":"","title":"Classes"},{"location":"modules/Enemy.lua/#liblevelgenenemydata","text":"Class containing data related to processing it by the various level generation components. Properties : entity : string - The base entity type maxLevel : number - Max level the entity type can have id : number[] - Numeric IDs for every level the entity has warRingUpgrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when ring of war is in effect warShrineUpgrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when shrine of war is in effect peaceRingDowngrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when ring of peace is in effect challengeCharacterDowngrade : table<number,number> - Table containing a mapping which specifies which levels get converted to which when playing a challenge character (Monk/Coda/Aria/Bolt - used to downgrade black bats into blue)","title":"LibLevelGen.EnemyData"},{"location":"modules/Enemy.lua/#enums","text":"","title":"Enums"},{"location":"modules/Enemy.lua/#enemytype","text":"Enum containing enemy types and their associated data. Use enemy.getData to get data for a given enemy from this enum. Entries : King CoralRiff KingConga Deathmetal Fortissimole Necrodancer DeadRinger Frankensteinway Conductor LuteDragon Direbat Dragon Banshee Minotaur Nightmare Mommy Ogre Metrognome Armadillo Armoredskeleton Bat Beetle Bishop Blademaster Cauldron Clone Devil ElectricMage Evileye Fireelemental Iceelemental Ghast Ghost Ghoul Goblin GoblinBomber Golem Gorgon Harpy Hellhound Knight Lich Monkey Mushroom Orc Pawn Pixie Queen Rook Sarcophagus Shovemonster Skeleton Skeletonknight Skeletonmage Skull SleepingGoblin Slime Spider Tarmonster Tentacle Trapcouldron Trapchest Troll Warlock WaterBall Wight Wraith Yeti Zombie ZombieElectric ZombieSnake","title":"enemy.Type"},{"location":"modules/Entity.lua/","text":"Entity.lua \u00b6 Functions \u00b6 entity.new \u00b6 entity.new(instance: LibLegelGen.Instance, type: string, x?: number, y?: number, level?: number | number[]): LibLevelGen.Entity Create a new LibLevelGen entity. Parameters : instance : LibLegelGen.Instance - Parent instance of the entity type : string - Entity type x? : number - X coordinate of the entity, relative to the room it's in. Defaults to -1 y? : number - Y coordinate of the entity, relative to the room it's in Defaults to -1 level? : number | number[] - Level of the entity, if a table is specified it's picked randomly from the provided values. Defaults to 1. Returns : LibLevelGen.Entity Classes \u00b6 LibLevelGen.Entity \u00b6 Represents a LibLevelGen entity object Properties : instance : LibLegelGen.Instance - Instance this entity belongs to type : string - Entity type x : number - Entity X coordinate relative, relative to the room it's in y : number - Entity Y coordinate relative, relative to the room it's in level : number - Entity level saleCurrency : string | nil - If entity has a price, this determines the currency price : table | nil - Entity price data, in the format set by Synchrony's levelUtils.setEntityPriceTag attributes : table | nil - Additional entity attributes. Use .setAttribute and .getOrCreateAttribute methods to manipulate this table. inventory : table | nil - Entity's inventory. Use the .giveItem method to manipulate this table. Methods : LibLevelGen.Entity.setAttribute \u00b6 setAttribute(self: LibLevelGen.Entity, component: string, field: string, value: any): LibLevelGen.Entity Set value of the given component field for when the entity is spawned. Parameters : self : LibLevelGen.Entity - The entity component : string - Component name field : string - Field in the given component value : any - Value to write to the field Returns : LibLevelGen.Entity LibLevelGen.Entity.setPrice \u00b6 setPrice(self: LibLevelGen.Entity, currency?: \"coins\" | \"blood\", amount?: number): LibLevelGen.Entity Set price of the entity. If price is not specified, it is automatically obtained. Parameters : self : LibLevelGen.Entity - The Entity currency? : \"coins\" | \"blood\" - Currency type, defaults to \"coins\" amount? : number - The price value. If not specified, it's calculated automatically. Returns : LibLevelGen.Entity LibLevelGen.Entity.setDiscount \u00b6 setDiscount(self: LibLevelGen.Entity, discount: number): LibLevelGen.Entity Set discount on the price. Parameters : self : LibLevelGen.Entity - The entity discount : number - The discount factor. 0.5 will result in the price being halved. Returns : LibLevelGen.Entity LibLevelGen.Entity.setQuantity \u00b6 setQuantity(self: LibLevelGen.Entity, quantity: number): LibLevelGen.Entity Set quantity (itemStack.quantity field) Parameters : self : LibLevelGen.Entity - The entity quantity : number - The quantity amount to set Returns : LibLevelGen.Entity LibLevelGen.Entity.giveItem \u00b6 giveItem(self: LibLevelGen.Entity, item: string | LibLevelGen.Entity): LibLevelGen.Entity Add an item to entity's inventory. Parameters : self : LibLevelGen.Entity - The entity item : string | LibLevelGen.Entity - Entity type or an existing entity to add to the inventory. Returns : LibLevelGen.Entity LibLevelGen.Entity.getOrCreateAttribute \u00b6 getOrCreateAttribute(self: LibLevelGen.Entity, component: string, field: string): LibLevelGen.Entity Get an attribute of the entity. If it doesn't exist, it gets created and added (with no value specified) Parameters : self : LibLevelGen.Entity - The entity component : string - Component name field : string - Field name in the given component Returns : LibLevelGen.Entity LibLevelGen.Entity.storeItem \u00b6 storeItem(self: LibLevelGen.Entity, item: string): LibLevelGen.Entity Add an item to entity's storage. Parameters : self : LibLevelGen.Entity - The entity item : string - Item entity type Returns : LibLevelGen.Entity","title":"Entity.lua"},{"location":"modules/Entity.lua/#entitylua","text":"","title":"Entity.lua"},{"location":"modules/Entity.lua/#functions","text":"","title":"Functions"},{"location":"modules/Entity.lua/#entitynew","text":"entity.new(instance: LibLegelGen.Instance, type: string, x?: number, y?: number, level?: number | number[]): LibLevelGen.Entity Create a new LibLevelGen entity. Parameters : instance : LibLegelGen.Instance - Parent instance of the entity type : string - Entity type x? : number - X coordinate of the entity, relative to the room it's in. Defaults to -1 y? : number - Y coordinate of the entity, relative to the room it's in Defaults to -1 level? : number | number[] - Level of the entity, if a table is specified it's picked randomly from the provided values. Defaults to 1. Returns : LibLevelGen.Entity","title":"entity.new"},{"location":"modules/Entity.lua/#classes","text":"","title":"Classes"},{"location":"modules/Entity.lua/#liblevelgenentity","text":"Represents a LibLevelGen entity object Properties : instance : LibLegelGen.Instance - Instance this entity belongs to type : string - Entity type x : number - Entity X coordinate relative, relative to the room it's in y : number - Entity Y coordinate relative, relative to the room it's in level : number - Entity level saleCurrency : string | nil - If entity has a price, this determines the currency price : table | nil - Entity price data, in the format set by Synchrony's levelUtils.setEntityPriceTag attributes : table | nil - Additional entity attributes. Use .setAttribute and .getOrCreateAttribute methods to manipulate this table. inventory : table | nil - Entity's inventory. Use the .giveItem method to manipulate this table. Methods :","title":"LibLevelGen.Entity"},{"location":"modules/Entity.lua/#liblevelgenentitysetattribute","text":"setAttribute(self: LibLevelGen.Entity, component: string, field: string, value: any): LibLevelGen.Entity Set value of the given component field for when the entity is spawned. Parameters : self : LibLevelGen.Entity - The entity component : string - Component name field : string - Field in the given component value : any - Value to write to the field Returns : LibLevelGen.Entity","title":"LibLevelGen.Entity.setAttribute"},{"location":"modules/Entity.lua/#liblevelgenentitysetprice","text":"setPrice(self: LibLevelGen.Entity, currency?: \"coins\" | \"blood\", amount?: number): LibLevelGen.Entity Set price of the entity. If price is not specified, it is automatically obtained. Parameters : self : LibLevelGen.Entity - The Entity currency? : \"coins\" | \"blood\" - Currency type, defaults to \"coins\" amount? : number - The price value. If not specified, it's calculated automatically. Returns : LibLevelGen.Entity","title":"LibLevelGen.Entity.setPrice"},{"location":"modules/Entity.lua/#liblevelgenentitysetdiscount","text":"setDiscount(self: LibLevelGen.Entity, discount: number): LibLevelGen.Entity Set discount on the price. Parameters : self : LibLevelGen.Entity - The entity discount : number - The discount factor. 0.5 will result in the price being halved. Returns : LibLevelGen.Entity","title":"LibLevelGen.Entity.setDiscount"},{"location":"modules/Entity.lua/#liblevelgenentitysetquantity","text":"setQuantity(self: LibLevelGen.Entity, quantity: number): LibLevelGen.Entity Set quantity (itemStack.quantity field) Parameters : self : LibLevelGen.Entity - The entity quantity : number - The quantity amount to set Returns : LibLevelGen.Entity","title":"LibLevelGen.Entity.setQuantity"},{"location":"modules/Entity.lua/#liblevelgenentitygiveitem","text":"giveItem(self: LibLevelGen.Entity, item: string | LibLevelGen.Entity): LibLevelGen.Entity Add an item to entity's inventory. Parameters : self : LibLevelGen.Entity - The entity item : string | LibLevelGen.Entity - Entity type or an existing entity to add to the inventory. Returns : LibLevelGen.Entity","title":"LibLevelGen.Entity.giveItem"},{"location":"modules/Entity.lua/#liblevelgenentitygetorcreateattribute","text":"getOrCreateAttribute(self: LibLevelGen.Entity, component: string, field: string): LibLevelGen.Entity Get an attribute of the entity. If it doesn't exist, it gets created and added (with no value specified) Parameters : self : LibLevelGen.Entity - The entity component : string - Component name field : string - Field name in the given component Returns : LibLevelGen.Entity","title":"LibLevelGen.Entity.getOrCreateAttribute"},{"location":"modules/Entity.lua/#liblevelgenentitystoreitem","text":"storeItem(self: LibLevelGen.Entity, item: string): LibLevelGen.Entity Add an item to entity's storage. Parameters : self : LibLevelGen.Entity - The entity item : string - Item entity type Returns : LibLevelGen.Entity","title":"LibLevelGen.Entity.storeItem"},{"location":"modules/ErrorLevel.lua/","text":"ErrorLevel.lua \u00b6 Functions \u00b6 errorLevel.generate \u00b6 errorLevel.generate(parameters: LibLevelGen.LevelGenerationEventParameters): void Generates a simple placeholder level. Parameters : parameters : LibLevelGen.LevelGenerationEventParameters - The parameters from the level generation event","title":"ErrorLevel.lua"},{"location":"modules/ErrorLevel.lua/#errorlevellua","text":"","title":"ErrorLevel.lua"},{"location":"modules/ErrorLevel.lua/#functions","text":"","title":"Functions"},{"location":"modules/ErrorLevel.lua/#errorlevelgenerate","text":"errorLevel.generate(parameters: LibLevelGen.LevelGenerationEventParameters): void Generates a simple placeholder level. Parameters : parameters : LibLevelGen.LevelGenerationEventParameters - The parameters from the level generation event","title":"errorLevel.generate"},{"location":"modules/LibLevelGen.lua/","text":"LibLevelGen.lua \u00b6 Functions \u00b6 libLevelGen.new \u00b6 libLevelGen.new(ev: LibLevelGen.LevelGenerationEventParameters): LibLegelGen.Instance no description Parameters : ev : LibLevelGen.LevelGenerationEventParameters - no description Returns : LibLegelGen.Instance libLevelGen.registerGenerator \u00b6 libLevelGen.registerGenerator(name: string, func: function, data: LibLevelGen.Config?, modeData: GameSession.Mode.Data?): number no description Parameters : name : string - no description func : function - no description data : LibLevelGen.Config? - no description modeData : GameSession.Mode.Data? - no description Returns : number libLevelGen.getGeneratorProperties \u00b6 libLevelGen.getGeneratorProperties(type: any): LibLevelGen.Generator no description Parameters : type : any - no description Returns : LibLevelGen.Generator libLevelGen.setDefaultGenerator \u00b6 libLevelGen.setDefaultGenerator(type: any): void no description Parameters : type : any - no description libLevelGen.registerPostProcessor \u00b6 libLevelGen.registerPostProcessor(func: function): void no description Parameters : func : function - no description libLevelGen.initLibLevelGenRunState \u00b6 libLevelGen.initLibLevelGenRunState(runState: LibLevelGen.RunState, ev: LibLevelGen.LevelGenerationEventParameters): void no description Parameters : runState : LibLevelGen.RunState - no description ev : LibLevelGen.LevelGenerationEventParameters - no description Classes \u00b6 LibLevelGen.RunState \u00b6 no description Properties : libLevelGenDataInitiated : boolean - no description previousLevelMinibosses : table - no description secretShopLevels : table<number,number> - no description seenItems : table<string,number> - no description seenShrines : number[] - no description shrineLevels : table<number,number> - no description shopkeeperDead : boolean - no description shopkeeperGhostLevel : number - no description shopkeeperGhostDepth : number - no description peaceRingActive : boolean - no description warRingActive : boolean - no description warShrineActive : boolean - no description bossShrineActive : boolean - no description spaceShrineActive : boolean - no description lockedShopPlaced : boolean - no description secretRockRoomPlaced : boolean - no description urnPlaced : boolean - no description LibLevelGen.Config \u00b6 no description Properties : allowLevel1Shrine : boolean - no description allowOldShrines : boolean - no description disableEnemyUpgrades : boolean - no description levelsPerZone : number - no description maxLevel : number - no description placeSecretShops : boolean - no description placeShrines : boolean - no description LibLevelGen.Generator \u00b6 no description Properties : name : string - no description func : function - no description data : LibLevelGen.Config - no description LibLevelGen.LevelGenerationConfig \u00b6 no description Properties : initialCharacters : string[] - no description isFinal : boolean - no description isLoopFinal : boolean - no description number : number - no description seed : number - no description LibLevelGen.LevelGenerationEventParameters \u00b6 no description Properties : callback : function - no description data : LibLevelGen.LevelGenerationConfig - no description failMaps : number - no description libLevelGenGeneratorData : LibLevelGen.Config - no description runState : LibLevelGen.RunState - no description LibLevelGen.MusicData \u00b6 no description Properties : id : string - no description level : number - no description type : string - no description zone : number - no description LibLegelGen.Instance \u00b6 no description Properties : rng : LibLevelGen.Rng - no description levelGeneratorData : LibLevelGen.Config - no description runState : LibLevelGen.RunState - no description segments : LibLevelGen.Segment[] - no description seed : number - no description currentSeed : number - no description singleChoiceID : number - no description level : number - no description music : LibLevelGen.MusicData - no description tileset : string - no description levelsPerZone : number - no description boss : number - no description callback : function - no description Methods : LibLegelGen.Instance.init \u00b6 init(self: LibLegelGen.Instance, ev: LibLevelGen.LevelGenerationEventParameters): void no description Parameters : self : LibLegelGen.Instance - no description ev : LibLevelGen.LevelGenerationEventParameters - no description Returns : void LibLegelGen.Instance.getDepth \u00b6 getDepth(self: LibLegelGen.Instance): number no description Parameters : self : LibLegelGen.Instance - no description Returns : number LibLegelGen.Instance.getFloor \u00b6 getFloor(self: LibLegelGen.Instance): number no description Parameters : self : LibLegelGen.Instance - no description Returns : number LibLegelGen.Instance.setMusic \u00b6 setMusic(self: LibLegelGen.Instance, music: LibLevelGen.MusicData): void no description Parameters : self : LibLegelGen.Instance - no description music : LibLevelGen.MusicData - no description Returns : void LibLegelGen.Instance.setTileset \u00b6 setTileset(self: LibLegelGen.Instance, tilesetName: string): void no description Parameters : self : LibLegelGen.Instance - no description tilesetName : string - no description Returns : void LibLegelGen.Instance.rand \u00b6 rand(self: LibLegelGen.Instance): number Generate a random 32-bit integer number. Parameters : self : LibLegelGen.Instance - no description Returns : number LibLegelGen.Instance.randFloatRange \u00b6 randFloatRange(self: LibLegelGen.Instance, min: number, max: number): number Generate a random float within the given range. Parameters : self : LibLegelGen.Instance - no description min : number - no description max : number - no description Returns : number LibLegelGen.Instance.randIntRange \u00b6 randIntRange(self: LibLegelGen.Instance, min: number, max: number): number Generate a random integer within the given range. Parameters : self : LibLegelGen.Instance - no description min : number - no description max : number - no description Returns : number LibLegelGen.Instance.randChoice \u00b6 randChoice(self: LibLegelGen.Instance, t: T[], remove: boolean?): T Choose a random element from the given table. Parameters : self : LibLegelGen.Instance - no description t : T[] - no description remove : boolean? - no description Returns : T LibLegelGen.Instance.randChoiceMany \u00b6 randChoiceMany(self: LibLegelGen.Instance, choices: T, n: number, remove: boolean?): T Choose n elements from the given table. Parameters : self : LibLegelGen.Instance - no description choices : T - no description n : number - no description remove : boolean? - no description Returns : T LibLegelGen.Instance.randChance \u00b6 randChance(self: LibLegelGen.Instance, probability: number Value between 0.0 and 1.0): boolean Randomly returns boolean based on given probability. Parameters : self : LibLegelGen.Instance - no description probability : number Value between 0.0 and 1.0 - no description Returns : boolean LibLegelGen.Instance.randWeightedChoice \u00b6 randWeightedChoice(self: LibLegelGen.Instance, chances: table<string,number>): string Randomly choose a value from the weighted choice data. Parameters : self : LibLegelGen.Instance - no description chances : table<string,number> - no description Returns : string LibLegelGen.Instance.createSegment \u00b6 createSegment(self: LibLegelGen.Instance): LibLevelGen.Segment no description Parameters : self : LibLegelGen.Instance - no description Returns : LibLevelGen.Segment","title":"LibLevelGen.lua"},{"location":"modules/LibLevelGen.lua/#liblevelgenlua","text":"","title":"LibLevelGen.lua"},{"location":"modules/LibLevelGen.lua/#functions","text":"","title":"Functions"},{"location":"modules/LibLevelGen.lua/#liblevelgennew","text":"libLevelGen.new(ev: LibLevelGen.LevelGenerationEventParameters): LibLegelGen.Instance no description Parameters : ev : LibLevelGen.LevelGenerationEventParameters - no description Returns : LibLegelGen.Instance","title":"libLevelGen.new"},{"location":"modules/LibLevelGen.lua/#liblevelgenregistergenerator","text":"libLevelGen.registerGenerator(name: string, func: function, data: LibLevelGen.Config?, modeData: GameSession.Mode.Data?): number no description Parameters : name : string - no description func : function - no description data : LibLevelGen.Config? - no description modeData : GameSession.Mode.Data? - no description Returns : number","title":"libLevelGen.registerGenerator"},{"location":"modules/LibLevelGen.lua/#liblevelgengetgeneratorproperties","text":"libLevelGen.getGeneratorProperties(type: any): LibLevelGen.Generator no description Parameters : type : any - no description Returns : LibLevelGen.Generator","title":"libLevelGen.getGeneratorProperties"},{"location":"modules/LibLevelGen.lua/#liblevelgensetdefaultgenerator","text":"libLevelGen.setDefaultGenerator(type: any): void no description Parameters : type : any - no description","title":"libLevelGen.setDefaultGenerator"},{"location":"modules/LibLevelGen.lua/#liblevelgenregisterpostprocessor","text":"libLevelGen.registerPostProcessor(func: function): void no description Parameters : func : function - no description","title":"libLevelGen.registerPostProcessor"},{"location":"modules/LibLevelGen.lua/#liblevelgeninitliblevelgenrunstate","text":"libLevelGen.initLibLevelGenRunState(runState: LibLevelGen.RunState, ev: LibLevelGen.LevelGenerationEventParameters): void no description Parameters : runState : LibLevelGen.RunState - no description ev : LibLevelGen.LevelGenerationEventParameters - no description","title":"libLevelGen.initLibLevelGenRunState"},{"location":"modules/LibLevelGen.lua/#classes","text":"","title":"Classes"},{"location":"modules/LibLevelGen.lua/#liblevelgenrunstate","text":"no description Properties : libLevelGenDataInitiated : boolean - no description previousLevelMinibosses : table - no description secretShopLevels : table<number,number> - no description seenItems : table<string,number> - no description seenShrines : number[] - no description shrineLevels : table<number,number> - no description shopkeeperDead : boolean - no description shopkeeperGhostLevel : number - no description shopkeeperGhostDepth : number - no description peaceRingActive : boolean - no description warRingActive : boolean - no description warShrineActive : boolean - no description bossShrineActive : boolean - no description spaceShrineActive : boolean - no description lockedShopPlaced : boolean - no description secretRockRoomPlaced : boolean - no description urnPlaced : boolean - no description","title":"LibLevelGen.RunState"},{"location":"modules/LibLevelGen.lua/#liblevelgenconfig","text":"no description Properties : allowLevel1Shrine : boolean - no description allowOldShrines : boolean - no description disableEnemyUpgrades : boolean - no description levelsPerZone : number - no description maxLevel : number - no description placeSecretShops : boolean - no description placeShrines : boolean - no description","title":"LibLevelGen.Config"},{"location":"modules/LibLevelGen.lua/#liblevelgengenerator","text":"no description Properties : name : string - no description func : function - no description data : LibLevelGen.Config - no description","title":"LibLevelGen.Generator"},{"location":"modules/LibLevelGen.lua/#liblevelgenlevelgenerationconfig","text":"no description Properties : initialCharacters : string[] - no description isFinal : boolean - no description isLoopFinal : boolean - no description number : number - no description seed : number - no description","title":"LibLevelGen.LevelGenerationConfig"},{"location":"modules/LibLevelGen.lua/#liblevelgenlevelgenerationeventparameters","text":"no description Properties : callback : function - no description data : LibLevelGen.LevelGenerationConfig - no description failMaps : number - no description libLevelGenGeneratorData : LibLevelGen.Config - no description runState : LibLevelGen.RunState - no description","title":"LibLevelGen.LevelGenerationEventParameters"},{"location":"modules/LibLevelGen.lua/#liblevelgenmusicdata","text":"no description Properties : id : string - no description level : number - no description type : string - no description zone : number - no description","title":"LibLevelGen.MusicData"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstance","text":"no description Properties : rng : LibLevelGen.Rng - no description levelGeneratorData : LibLevelGen.Config - no description runState : LibLevelGen.RunState - no description segments : LibLevelGen.Segment[] - no description seed : number - no description currentSeed : number - no description singleChoiceID : number - no description level : number - no description music : LibLevelGen.MusicData - no description tileset : string - no description levelsPerZone : number - no description boss : number - no description callback : function - no description Methods :","title":"LibLegelGen.Instance"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstanceinit","text":"init(self: LibLegelGen.Instance, ev: LibLevelGen.LevelGenerationEventParameters): void no description Parameters : self : LibLegelGen.Instance - no description ev : LibLevelGen.LevelGenerationEventParameters - no description Returns : void","title":"LibLegelGen.Instance.init"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancegetdepth","text":"getDepth(self: LibLegelGen.Instance): number no description Parameters : self : LibLegelGen.Instance - no description Returns : number","title":"LibLegelGen.Instance.getDepth"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancegetfloor","text":"getFloor(self: LibLegelGen.Instance): number no description Parameters : self : LibLegelGen.Instance - no description Returns : number","title":"LibLegelGen.Instance.getFloor"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancesetmusic","text":"setMusic(self: LibLegelGen.Instance, music: LibLevelGen.MusicData): void no description Parameters : self : LibLegelGen.Instance - no description music : LibLevelGen.MusicData - no description Returns : void","title":"LibLegelGen.Instance.setMusic"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancesettileset","text":"setTileset(self: LibLegelGen.Instance, tilesetName: string): void no description Parameters : self : LibLegelGen.Instance - no description tilesetName : string - no description Returns : void","title":"LibLegelGen.Instance.setTileset"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancerand","text":"rand(self: LibLegelGen.Instance): number Generate a random 32-bit integer number. Parameters : self : LibLegelGen.Instance - no description Returns : number","title":"LibLegelGen.Instance.rand"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancerandfloatrange","text":"randFloatRange(self: LibLegelGen.Instance, min: number, max: number): number Generate a random float within the given range. Parameters : self : LibLegelGen.Instance - no description min : number - no description max : number - no description Returns : number","title":"LibLegelGen.Instance.randFloatRange"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancerandintrange","text":"randIntRange(self: LibLegelGen.Instance, min: number, max: number): number Generate a random integer within the given range. Parameters : self : LibLegelGen.Instance - no description min : number - no description max : number - no description Returns : number","title":"LibLegelGen.Instance.randIntRange"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancerandchoice","text":"randChoice(self: LibLegelGen.Instance, t: T[], remove: boolean?): T Choose a random element from the given table. Parameters : self : LibLegelGen.Instance - no description t : T[] - no description remove : boolean? - no description Returns : T","title":"LibLegelGen.Instance.randChoice"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancerandchoicemany","text":"randChoiceMany(self: LibLegelGen.Instance, choices: T, n: number, remove: boolean?): T Choose n elements from the given table. Parameters : self : LibLegelGen.Instance - no description choices : T - no description n : number - no description remove : boolean? - no description Returns : T","title":"LibLegelGen.Instance.randChoiceMany"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancerandchance","text":"randChance(self: LibLegelGen.Instance, probability: number Value between 0.0 and 1.0): boolean Randomly returns boolean based on given probability. Parameters : self : LibLegelGen.Instance - no description probability : number Value between 0.0 and 1.0 - no description Returns : boolean","title":"LibLegelGen.Instance.randChance"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancerandweightedchoice","text":"randWeightedChoice(self: LibLegelGen.Instance, chances: table<string,number>): string Randomly choose a value from the weighted choice data. Parameters : self : LibLegelGen.Instance - no description chances : table<string,number> - no description Returns : string","title":"LibLegelGen.Instance.randWeightedChoice"},{"location":"modules/LibLevelGen.lua/#liblegelgeninstancecreatesegment","text":"createSegment(self: LibLegelGen.Instance): LibLevelGen.Segment no description Parameters : self : LibLegelGen.Instance - no description Returns : LibLevelGen.Segment","title":"LibLegelGen.Instance.createSegment"},{"location":"modules/Loot.lua/","text":"Loot.lua \u00b6 Functions \u00b6 loot.chestForItem \u00b6 loot.chestForItem(itemType: string): string no description Parameters : itemType : string - no description Returns : string loot.createChestWithItem \u00b6 loot.createChestWithItem(instance: LibLegelGen.Instance, itemType: string, hidden: boolean, entityType: string optional chest entity type (defaults to chest color based on the item), entityLevel: number optional chest entity level): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description itemType : string - no description hidden : boolean - no description entityType : string optional chest entity type (defaults to chest color based on the item) - no description entityLevel : number optional chest entity level - no description Returns : LibLevelGen.Entity loot.createChest \u00b6 loot.createChest(instance: LibLegelGen.Instance, args: LibLevelGen.ChestChoiceArguments?): void no description Parameters : instance : LibLegelGen.Instance - no description args : LibLevelGen.ChestChoiceArguments? - no description loot.createGold \u00b6 loot.createGold(instance: LibLegelGen.Instance, amount: number): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description amount : number - no description Returns : LibLevelGen.Entity loot.createUrn \u00b6 loot.createUrn(instance: LibLegelGen.Instance): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description Returns : LibLevelGen.Entity loot.createCrate \u00b6 loot.createCrate(instance: LibLegelGen.Instance): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description Returns : LibLevelGen.Entity loot.placeChests \u00b6 loot.placeChests(segment: LibLevelGen.Segment): void Place remaining chests. Parameters : segment : LibLevelGen.Segment - no description loot.placeCrates \u00b6 loot.placeCrates(segment: LibLevelGen.Segment): void Place remaining crates. Parameters : segment : LibLevelGen.Segment - no description Classes \u00b6 LibLevelGen.ChestChoiceArguments extends ItemGeneration.ChoiceArguments \u00b6 no description Properties : hidden : boolean? Whether the chest starts visible or not - no description chestType : string? chest entity type - no description chestLevel : number? chest entity type level - no description","title":"Loot.lua"},{"location":"modules/Loot.lua/#lootlua","text":"","title":"Loot.lua"},{"location":"modules/Loot.lua/#functions","text":"","title":"Functions"},{"location":"modules/Loot.lua/#lootchestforitem","text":"loot.chestForItem(itemType: string): string no description Parameters : itemType : string - no description Returns : string","title":"loot.chestForItem"},{"location":"modules/Loot.lua/#lootcreatechestwithitem","text":"loot.createChestWithItem(instance: LibLegelGen.Instance, itemType: string, hidden: boolean, entityType: string optional chest entity type (defaults to chest color based on the item), entityLevel: number optional chest entity level): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description itemType : string - no description hidden : boolean - no description entityType : string optional chest entity type (defaults to chest color based on the item) - no description entityLevel : number optional chest entity level - no description Returns : LibLevelGen.Entity","title":"loot.createChestWithItem"},{"location":"modules/Loot.lua/#lootcreatechest","text":"loot.createChest(instance: LibLegelGen.Instance, args: LibLevelGen.ChestChoiceArguments?): void no description Parameters : instance : LibLegelGen.Instance - no description args : LibLevelGen.ChestChoiceArguments? - no description","title":"loot.createChest"},{"location":"modules/Loot.lua/#lootcreategold","text":"loot.createGold(instance: LibLegelGen.Instance, amount: number): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description amount : number - no description Returns : LibLevelGen.Entity","title":"loot.createGold"},{"location":"modules/Loot.lua/#lootcreateurn","text":"loot.createUrn(instance: LibLegelGen.Instance): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description Returns : LibLevelGen.Entity","title":"loot.createUrn"},{"location":"modules/Loot.lua/#lootcreatecrate","text":"loot.createCrate(instance: LibLegelGen.Instance): LibLevelGen.Entity no description Parameters : instance : LibLegelGen.Instance - no description Returns : LibLevelGen.Entity","title":"loot.createCrate"},{"location":"modules/Loot.lua/#lootplacechests","text":"loot.placeChests(segment: LibLevelGen.Segment): void Place remaining chests. Parameters : segment : LibLevelGen.Segment - no description","title":"loot.placeChests"},{"location":"modules/Loot.lua/#lootplacecrates","text":"loot.placeCrates(segment: LibLevelGen.Segment): void Place remaining crates. Parameters : segment : LibLevelGen.Segment - no description","title":"loot.placeCrates"},{"location":"modules/Loot.lua/#classes","text":"","title":"Classes"},{"location":"modules/Loot.lua/#liblevelgenchestchoicearguments-extends-itemgenerationchoicearguments","text":"no description Properties : hidden : boolean? Whether the chest starts visible or not - no description chestType : string? chest entity type - no description chestLevel : number? chest entity type level - no description","title":"LibLevelGen.ChestChoiceArguments extends ItemGeneration.ChoiceArguments"},{"location":"modules/Rand.lua/","text":"Rand.lua \u00b6 Functions \u00b6 rand.new \u00b6 rand.new(seed: number): LibLevelGen.Rng Create a new random number generator instance. Parameters : seed : number - Initial seed Returns : LibLevelGen.Rng Classes \u00b6 LibLevelGen.Rng \u00b6 no description Methods : LibLevelGen.Rng.rand \u00b6 rand(self: LibLevelGen.Rng): number Generate a random 32-bit integer number. Parameters : self : LibLevelGen.Rng - no description Returns : number LibLevelGen.Rng.randFloatRange \u00b6 randFloatRange(self: LibLevelGen.Rng, min: number, max: number): number Generate a random float within the given range. Parameters : self : LibLevelGen.Rng - no description min : number - no description max : number - no description Returns : number LibLevelGen.Rng.randIntRange \u00b6 randIntRange(self: LibLevelGen.Rng, min: number, max: number): number Generate a random integer within the given range. Parameters : self : LibLevelGen.Rng - no description min : number - no description max : number - no description Returns : number LibLevelGen.Rng.randChoice \u00b6 randChoice(self: LibLevelGen.Rng, t: T[], remove: boolean): T Choose a random element from the given table. Parameters : self : LibLevelGen.Rng - no description t : T[] - no description remove : boolean - If true, element will be removed from the original table. Returns : T LibLevelGen.Rng.randChoiceMany \u00b6 randChoiceMany(self: LibLevelGen.Rng, choices: T, n: number, remove: boolean): T Choose a n elements from the given table. Parameters : self : LibLevelGen.Rng - no description choices : T - no description n : number - no description remove : boolean - If true, element will be removed from the original table. Returns : T LibLevelGen.Rng.randChance \u00b6 randChance(self: LibLevelGen.Rng, probability: number): boolean Randomly returns boolean based on given probability. Parameters : self : LibLevelGen.Rng - no description probability : number - Value between 0.0 and 1.0 Returns : boolean LibLevelGen.Rng.randWeightedChoice \u00b6 randWeightedChoice(self: LibLevelGen.Rng, chances: table<string,number>): string Randomly choose a value from the weighted choice data. Parameters : self : LibLevelGen.Rng - no description chances : table<string,number> - no description Returns : string","title":"Rand.lua"},{"location":"modules/Rand.lua/#randlua","text":"","title":"Rand.lua"},{"location":"modules/Rand.lua/#functions","text":"","title":"Functions"},{"location":"modules/Rand.lua/#randnew","text":"rand.new(seed: number): LibLevelGen.Rng Create a new random number generator instance. Parameters : seed : number - Initial seed Returns : LibLevelGen.Rng","title":"rand.new"},{"location":"modules/Rand.lua/#classes","text":"","title":"Classes"},{"location":"modules/Rand.lua/#liblevelgenrng","text":"no description Methods :","title":"LibLevelGen.Rng"},{"location":"modules/Rand.lua/#liblevelgenrngrand","text":"rand(self: LibLevelGen.Rng): number Generate a random 32-bit integer number. Parameters : self : LibLevelGen.Rng - no description Returns : number","title":"LibLevelGen.Rng.rand"},{"location":"modules/Rand.lua/#liblevelgenrngrandfloatrange","text":"randFloatRange(self: LibLevelGen.Rng, min: number, max: number): number Generate a random float within the given range. Parameters : self : LibLevelGen.Rng - no description min : number - no description max : number - no description Returns : number","title":"LibLevelGen.Rng.randFloatRange"},{"location":"modules/Rand.lua/#liblevelgenrngrandintrange","text":"randIntRange(self: LibLevelGen.Rng, min: number, max: number): number Generate a random integer within the given range. Parameters : self : LibLevelGen.Rng - no description min : number - no description max : number - no description Returns : number","title":"LibLevelGen.Rng.randIntRange"},{"location":"modules/Rand.lua/#liblevelgenrngrandchoice","text":"randChoice(self: LibLevelGen.Rng, t: T[], remove: boolean): T Choose a random element from the given table. Parameters : self : LibLevelGen.Rng - no description t : T[] - no description remove : boolean - If true, element will be removed from the original table. Returns : T","title":"LibLevelGen.Rng.randChoice"},{"location":"modules/Rand.lua/#liblevelgenrngrandchoicemany","text":"randChoiceMany(self: LibLevelGen.Rng, choices: T, n: number, remove: boolean): T Choose a n elements from the given table. Parameters : self : LibLevelGen.Rng - no description choices : T - no description n : number - no description remove : boolean - If true, element will be removed from the original table. Returns : T","title":"LibLevelGen.Rng.randChoiceMany"},{"location":"modules/Rand.lua/#liblevelgenrngrandchance","text":"randChance(self: LibLevelGen.Rng, probability: number): boolean Randomly returns boolean based on given probability. Parameters : self : LibLevelGen.Rng - no description probability : number - Value between 0.0 and 1.0 Returns : boolean","title":"LibLevelGen.Rng.randChance"},{"location":"modules/Rand.lua/#liblevelgenrngrandweightedchoice","text":"randWeightedChoice(self: LibLevelGen.Rng, chances: table<string,number>): string Randomly choose a value from the weighted choice data. Parameters : self : LibLevelGen.Rng - no description chances : table<string,number> - no description Returns : string","title":"LibLevelGen.Rng.randWeightedChoice"},{"location":"modules/Room.lua/","text":"Room.lua \u00b6 Functions \u00b6 room.new \u00b6 room.new(instance: LibLegelGen.Instance, segment: LibLevelGen.Segment, x: number, y: number, w: number, h: number, flags: number): LibLevelGen.Room Create a new room within the segment. Parameters : instance : LibLegelGen.Instance - no description segment : LibLevelGen.Segment - no description x : number - no description y : number - no description w : number - no description h : number - no description flags : number - no description Returns : LibLevelGen.Room Classes \u00b6 LibLevelGen.TileRequirements \u00b6 no description Properties : isFloor : TriBool - no description isWall : TriBool - no description levelExit : TriBool - no description hasWallTorch : TriBool - no description hasEntity : TriBool - no description tileType : string | nil - no description nearFloor : TriBool - no description nearWall : TriBool - no description nearBorder : TriBool - no description filter : fun(room: LibLevelGen.Room, tile: LibLevelGen.Tile) | nil - no description notCollision : number | nil - no description collision : number | nil - no description rect : LibLevelGen.Rect | nil - no description notRect : LibLevelGen.Rect | nil - no description wire : TriBool - no description info : table | nil - no description entrance : TriBool - no description adjacentEntrance : TriBool - no description directlyAdjacentEntrance : TriBool - no description noWallTallSprite : TriBool - no description LibLevelGen.Tile \u00b6 no description Properties : tileset : string - no description type : string - no description info : table - no description wire : integer - no description hasEntity : boolean - no description entities : LibLevelGen.Entity[] - no description hasWallTorch : boolean - no description x : number - no description y : number - no description rx : number - no description ry : number - no description adjacentEntrance : boolean - no description directlyAdjacentEntrance : boolean - no description isEntrance : boolean - no description room : LibLevelGen.Room - no description instance : LibLegelGen.Instance - no description Methods : LibLevelGen.Tile.convert \u00b6 convert(self: LibLevelGen.Tile, tileType: string): void Convert the tile to a different type. Parameters : self : LibLevelGen.Tile - no description tileType : string - no description Returns : void LibLevelGen.Tile.setIsEntrance \u00b6 setIsEntrance(self: LibLevelGen.Tile): void Set the isEntrance flag on the tile and adjacentEntrance flags on nearby tiles. Parameters : self : LibLevelGen.Tile - no description Returns : void LibLevelGen.Tile.placeEntity \u00b6 placeEntity(self: LibLevelGen.Tile, entityOrType: string | LibLevelGen.Entity, level: number | nil): LibLevelGen.Entity Place entity of given type and level on the tile. Parameters : self : LibLevelGen.Tile - no description entityOrType : string | LibLevelGen.Entity - no description level : number | nil - no description Returns : LibLevelGen.Entity LibLevelGen.Tile.meetsRequirements \u00b6 meetsRequirements(self: LibLevelGen.Tile, requirements: LibLevelGen.TileRequirements): void Check if the tile meets specified requirements. Parameters : self : LibLevelGen.Tile - no description requirements : LibLevelGen.TileRequirements - no description Returns : void LibLevelGen.Tile.tileBelowIsWall \u00b6 tileBelowIsWall(self: LibLevelGen.Tile): void no description Parameters : self : LibLevelGen.Tile - no description Returns : void LibLevelGen.Tile.inRect \u00b6 inRect(self: LibLevelGen.Tile, rect: LibLevelGen.Rect): void Check if the tile is within a given rect in the room. Parameters : self : LibLevelGen.Tile - no description rect : LibLevelGen.Rect - no description Returns : void LibLevelGen.RoomLinkData \u00b6 no description Properties : x : number - no description y : number - no description centerX : number - no description centerY : number - no description axis : number - no description size : number - no description room : LibLevelGen.Room - no description LibLevelGen.RoomLinks \u00b6 no description Properties : top : LibLevelGen.RoomLinkData[] - no description bottom : LibLevelGen.RoomLinkData[] - no description left : LibLevelGen.RoomLinkData[] - no description right : LibLevelGen.RoomLinkData[] - no description LibLevelGen.Point \u00b6 no description Properties : x : number - no description y : number - no description LibLevelGen.Room \u00b6 no description Properties : links : LibLevelGen.RoomLinkData[] - no description padding : LibLevelGen.PaddingData | nil - no description tiles : LibLevelGen.Tile[] - no description exit : LibLevelGen.Point | nil - no description instance : LibLegelGen.Instance - no description segment : LibLevelGen.Segment - no description userData : table - no description Methods : LibLevelGen.Room.init \u00b6 init(self: LibLevelGen.Room, x: number, y: number, w: number, h: number, flags: number): void Initializes the room. Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description w : number - no description h : number - no description flags : number - no description Returns : void LibLevelGen.Room.setFlags \u00b6 setFlags(self: LibLevelGen.Room, newFlags: number): void Adds new flags on top of existing flags. Parameters : self : LibLevelGen.Room - no description newFlags : number - no description Returns : void LibLevelGen.Room.clearFlags \u00b6 clearFlags(self: LibLevelGen.Room, flagsToClear: number): void Removes the given flags. Parameters : self : LibLevelGen.Room - no description flagsToClear : number - no description Returns : void LibLevelGen.Room.maskFlags \u00b6 maskFlags(self: LibLevelGen.Room, flags: number): void Removes all flags apart from the given ones. Parameters : self : LibLevelGen.Room - no description flags : number - no description Returns : void LibLevelGen.Room.checkFlags \u00b6 checkFlags(self: LibLevelGen.Room, flags: number): void Checks if the given flags are set. Parameters : self : LibLevelGen.Room - no description flags : number - no description Returns : void LibLevelGen.Room.setPaddingTileOverride \u00b6 setPaddingTileOverride(self: LibLevelGen.Room, data: LibLevelGen.PaddingData): void Set the padding that will be used instead of the one specified by the segment. Parameters : self : LibLevelGen.Room - no description data : LibLevelGen.PaddingData - no description Returns : void LibLevelGen.Room.getBounds \u00b6 getBounds(self: LibLevelGen.Room): number[] Get bounds of the room. Parameters : self : LibLevelGen.Room - no description Returns : number[] LibLevelGen.Room.getRect \u00b6 getRect(self: LibLevelGen.Room): LibLevelGen.Rect Get rect of the room. Parameters : self : LibLevelGen.Room - no description Returns : LibLevelGen.Rect LibLevelGen.Room.setTile \u00b6 setTile(self: LibLevelGen.Room, x: number, y: number, tileType: string, tileset: string?): void Set tile on the given coordinates. If tileset is not specified, the default one of the segment is used. Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description tileType : string - no description tileset : string? - no description Returns : void LibLevelGen.Room.getTile \u00b6 getTile(self: LibLevelGen.Room, x: number, y: number): LibLevelGen.Tile Get tile on given coordinates Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description Returns : LibLevelGen.Tile LibLevelGen.Room.deleteTile \u00b6 deleteTile(self: LibLevelGen.Room, x: number, y: number): void Delete the given tile (set it to Void pseudotile) Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description Returns : void LibLevelGen.Room.isTileNearWall \u00b6 isTileNearWall(self: LibLevelGen.Room, tile: LibLevelGen.Tile): boolean Checks if the given tile (assumed to be within this room) is near a wall tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description Returns : boolean LibLevelGen.Room.isTileNearFloor \u00b6 isTileNearFloor(self: LibLevelGen.Room, tile: LibLevelGen.Tile): boolean Checks if the given tile (assumed to be within this room) is near a floor tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description Returns : boolean LibLevelGen.Room.isTileNearBorder \u00b6 isTileNearBorder(self: LibLevelGen.Room, tile: LibLevelGen.Tile): boolean Checks if the given tile (assumed to be within this room) is near the edge of the room. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description Returns : boolean LibLevelGen.Room.fill \u00b6 fill(self: LibLevelGen.Room, parameters: LibLevelGen.RoomFillParameters | string Either the RoomFillParameters structure or simply the tile type string.): void Fill the room. Parameters : self : LibLevelGen.Room - no description parameters : LibLevelGen.RoomFillParameters | string Either the RoomFillParameters structure or simply the tile type string. - no description Returns : void LibLevelGen.Room.border \u00b6 border(self: LibLevelGen.Room, parameters: LibLevelGen.RoomBorderParameters | string): void Create a border around the room. Parameters : self : LibLevelGen.Room - no description parameters : LibLevelGen.RoomBorderParameters | string - no description Returns : void LibLevelGen.Room.selectTiles \u00b6 selectTiles(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements): LibLevelGen.Tile[] Returns all tiles that meet the requirements. Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description Returns : LibLevelGen.Tile[] LibLevelGen.Room.chooseRandomTile \u00b6 chooseRandomTile(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements): LibLevelGen.Tile Choose a random tile out of ones that meet requirements Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description Returns : LibLevelGen.Tile LibLevelGen.Room.chooseRandomTiles \u00b6 chooseRandomTiles(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements): LibLevelGen.Tile[] Choose multiple tiles out of ones that meet requirements. Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description Returns : LibLevelGen.Tile[] LibLevelGen.Room.placeWallTorch \u00b6 placeWallTorch(self: LibLevelGen.Room, tile: LibLevelGen.Tile, type: string|nil): void Place a wall torch on the given tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description type : string|nil - no description Returns : void LibLevelGen.Room.placeWallTorches \u00b6 placeWallTorches(self: LibLevelGen.Room, num: number, type: string|nil): void Place given amount of wall torches randomly on elligible tiles. Parameters : self : LibLevelGen.Room - no description num : number - no description type : string|nil - no description Returns : void LibLevelGen.Room.placeEntity \u00b6 placeEntity(self: LibLevelGen.Room, tile: LibLevelGen.Tile, entityOrType: string | LibLevelGen.Entity, level: number|nil): void Place entity on the given tile (wrapper around tile:placeEntity that checks if tile is not nil) Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description entityOrType : string | LibLevelGen.Entity - no description level : number|nil - no description Returns : void LibLevelGen.Room.placeEntityAt \u00b6 placeEntityAt(self: LibLevelGen.Room, x: number, y: number, entityOrType: string | LibLevelGen.Entity, level: number|nil): void Place entity on a tile on given coordinates. Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description entityOrType : string | LibLevelGen.Entity - no description level : number|nil - no description Returns : void LibLevelGen.Room.placeEntityRand \u00b6 placeEntityRand(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements, entityOrType: string | LibLevelGen.Entity, level: number | nil): void Place entity on a random tile that meets requrements. Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description entityOrType : string | LibLevelGen.Entity - no description level : number | nil - no description Returns : void LibLevelGen.Room.placeWire \u00b6 placeWire(self: LibLevelGen.Room, tile: LibLevelGen.Tile, connectivity: number Unused, reserved): void Place wire on the given tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description connectivity : number Unused, reserved - no description Returns : void LibLevelGen.Room.makeExit \u00b6 makeExit(self: LibLevelGen.Room): void Turn the room into an exit room - set appropriate flags, place the exit stairs and the miniboss. Parameters : self : LibLevelGen.Room - no description Returns : void LibLevelGen.Room.placeExit \u00b6 placeExit(self: LibLevelGen.Room): void Place exit somewhere in the room. Parameters : self : LibLevelGen.Room - no description Returns : void LibLevelGen.Room.placeMiniboss \u00b6 placeMiniboss(self: LibLevelGen.Room, minibosses: table In format {{\"type\", level}, ...}): void Place a miniboss in the room (assumes that the room is an exit room). Parameters : self : LibLevelGen.Room - no description minibosses : table In format {{\"type\", level}, ...} - no description Returns : void LibLevelGen.Room.randomlyConvertTiles \u00b6 randomlyConvertTiles(self: LibLevelGen.Room, sourceType: string, targetType: string, ratio: number): void Randomly convert tiles from sourceType to targetType, chance of conversion happening is ratio. Parameters : self : LibLevelGen.Room - no description sourceType : string - no description targetType : string - no description ratio : number - no description Returns : void LibLevelGen.Room.convertTiles \u00b6 convertTiles(self: LibLevelGen.Room, sourceType: string, targetType: string): void Convert all tiles from source type to target type. Parameters : self : LibLevelGen.Room - no description sourceType : string - no description targetType : string - no description Returns : void LibLevelGen.Room.spreadTile \u00b6 spreadTile(self: LibLevelGen.Room, targetType: string, requirements: LibLevelGen.TileRequirements, minConvert: number, maxConvert: number, initialTile: LibLevelGen.Tile? can be used to specify initial tile, instead of choosing it randomly): void Choose 1 tile that meets requirement and convert it and other nearby tiles to target type. Parameters : self : LibLevelGen.Room - no description targetType : string - no description requirements : LibLevelGen.TileRequirements - no description minConvert : number - no description maxConvert : number - no description initialTile : LibLevelGen.Tile? can be used to specify initial tile, instead of choosing it randomly - no description Returns : void LibLevelGen.Room.makeShop \u00b6 makeShop(self: LibLevelGen.Room, locked: boolean?, force: boolean?): void Make the room a shop. TODO: move into a separate module Parameters : self : LibLevelGen.Room - no description locked : boolean? - no description force : boolean? - no description Returns : void LibLevelGen.RoomFillParameters extends LibLevelGen.TileData \u00b6 no description Properties : tileset : string - no description type : string - no description rect : LibLevelGen.Rect | nil - no description LibLevelGen.RoomBorderSideCount \u00b6 no description Properties : top : number - no description bottom : number - no description left : number - no description right : number - no description LibLevelGen.RoomBorderParameters extends LibLevelGen.TileData \u00b6 no description Properties : tileset : string - no description type : string - no description rect : LibLevelGen.Rect - no description sides : LibLevelGen.RoomBorderSideCount - no description Enums \u00b6 room.Axis \u00b6 no description Entries : VERTICAL HORIZONTAL room.Flag \u00b6 Flags which determine the properties of the room Entries : NONE ALLOW_ENEMY ALLOW_CHEST ALLOW_CRATE ALLOW_TRAP ALLOW_TRAVELRUNE ALLOW_SHRINE ALLOW_TORCH ALLOW_TILE_CONVERSION ALLOW_SECRET_FILL EXIT STARTING room.Type \u00b6 no description Entries : REGULAR STARTING EXIT CORRIDOR SECRET SHOP SECRET_SHOP OTHER","title":"Room.lua"},{"location":"modules/Room.lua/#roomlua","text":"","title":"Room.lua"},{"location":"modules/Room.lua/#functions","text":"","title":"Functions"},{"location":"modules/Room.lua/#roomnew","text":"room.new(instance: LibLegelGen.Instance, segment: LibLevelGen.Segment, x: number, y: number, w: number, h: number, flags: number): LibLevelGen.Room Create a new room within the segment. Parameters : instance : LibLegelGen.Instance - no description segment : LibLevelGen.Segment - no description x : number - no description y : number - no description w : number - no description h : number - no description flags : number - no description Returns : LibLevelGen.Room","title":"room.new"},{"location":"modules/Room.lua/#classes","text":"","title":"Classes"},{"location":"modules/Room.lua/#liblevelgentilerequirements","text":"no description Properties : isFloor : TriBool - no description isWall : TriBool - no description levelExit : TriBool - no description hasWallTorch : TriBool - no description hasEntity : TriBool - no description tileType : string | nil - no description nearFloor : TriBool - no description nearWall : TriBool - no description nearBorder : TriBool - no description filter : fun(room: LibLevelGen.Room, tile: LibLevelGen.Tile) | nil - no description notCollision : number | nil - no description collision : number | nil - no description rect : LibLevelGen.Rect | nil - no description notRect : LibLevelGen.Rect | nil - no description wire : TriBool - no description info : table | nil - no description entrance : TriBool - no description adjacentEntrance : TriBool - no description directlyAdjacentEntrance : TriBool - no description noWallTallSprite : TriBool - no description","title":"LibLevelGen.TileRequirements"},{"location":"modules/Room.lua/#liblevelgentile","text":"no description Properties : tileset : string - no description type : string - no description info : table - no description wire : integer - no description hasEntity : boolean - no description entities : LibLevelGen.Entity[] - no description hasWallTorch : boolean - no description x : number - no description y : number - no description rx : number - no description ry : number - no description adjacentEntrance : boolean - no description directlyAdjacentEntrance : boolean - no description isEntrance : boolean - no description room : LibLevelGen.Room - no description instance : LibLegelGen.Instance - no description Methods :","title":"LibLevelGen.Tile"},{"location":"modules/Room.lua/#liblevelgentileconvert","text":"convert(self: LibLevelGen.Tile, tileType: string): void Convert the tile to a different type. Parameters : self : LibLevelGen.Tile - no description tileType : string - no description Returns : void","title":"LibLevelGen.Tile.convert"},{"location":"modules/Room.lua/#liblevelgentilesetisentrance","text":"setIsEntrance(self: LibLevelGen.Tile): void Set the isEntrance flag on the tile and adjacentEntrance flags on nearby tiles. Parameters : self : LibLevelGen.Tile - no description Returns : void","title":"LibLevelGen.Tile.setIsEntrance"},{"location":"modules/Room.lua/#liblevelgentileplaceentity","text":"placeEntity(self: LibLevelGen.Tile, entityOrType: string | LibLevelGen.Entity, level: number | nil): LibLevelGen.Entity Place entity of given type and level on the tile. Parameters : self : LibLevelGen.Tile - no description entityOrType : string | LibLevelGen.Entity - no description level : number | nil - no description Returns : LibLevelGen.Entity","title":"LibLevelGen.Tile.placeEntity"},{"location":"modules/Room.lua/#liblevelgentilemeetsrequirements","text":"meetsRequirements(self: LibLevelGen.Tile, requirements: LibLevelGen.TileRequirements): void Check if the tile meets specified requirements. Parameters : self : LibLevelGen.Tile - no description requirements : LibLevelGen.TileRequirements - no description Returns : void","title":"LibLevelGen.Tile.meetsRequirements"},{"location":"modules/Room.lua/#liblevelgentiletilebelowiswall","text":"tileBelowIsWall(self: LibLevelGen.Tile): void no description Parameters : self : LibLevelGen.Tile - no description Returns : void","title":"LibLevelGen.Tile.tileBelowIsWall"},{"location":"modules/Room.lua/#liblevelgentileinrect","text":"inRect(self: LibLevelGen.Tile, rect: LibLevelGen.Rect): void Check if the tile is within a given rect in the room. Parameters : self : LibLevelGen.Tile - no description rect : LibLevelGen.Rect - no description Returns : void","title":"LibLevelGen.Tile.inRect"},{"location":"modules/Room.lua/#liblevelgenroomlinkdata","text":"no description Properties : x : number - no description y : number - no description centerX : number - no description centerY : number - no description axis : number - no description size : number - no description room : LibLevelGen.Room - no description","title":"LibLevelGen.RoomLinkData"},{"location":"modules/Room.lua/#liblevelgenroomlinks","text":"no description Properties : top : LibLevelGen.RoomLinkData[] - no description bottom : LibLevelGen.RoomLinkData[] - no description left : LibLevelGen.RoomLinkData[] - no description right : LibLevelGen.RoomLinkData[] - no description","title":"LibLevelGen.RoomLinks"},{"location":"modules/Room.lua/#liblevelgenpoint","text":"no description Properties : x : number - no description y : number - no description","title":"LibLevelGen.Point"},{"location":"modules/Room.lua/#liblevelgenroom","text":"no description Properties : links : LibLevelGen.RoomLinkData[] - no description padding : LibLevelGen.PaddingData | nil - no description tiles : LibLevelGen.Tile[] - no description exit : LibLevelGen.Point | nil - no description instance : LibLegelGen.Instance - no description segment : LibLevelGen.Segment - no description userData : table - no description Methods :","title":"LibLevelGen.Room"},{"location":"modules/Room.lua/#liblevelgenroominit","text":"init(self: LibLevelGen.Room, x: number, y: number, w: number, h: number, flags: number): void Initializes the room. Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description w : number - no description h : number - no description flags : number - no description Returns : void","title":"LibLevelGen.Room.init"},{"location":"modules/Room.lua/#liblevelgenroomsetflags","text":"setFlags(self: LibLevelGen.Room, newFlags: number): void Adds new flags on top of existing flags. Parameters : self : LibLevelGen.Room - no description newFlags : number - no description Returns : void","title":"LibLevelGen.Room.setFlags"},{"location":"modules/Room.lua/#liblevelgenroomclearflags","text":"clearFlags(self: LibLevelGen.Room, flagsToClear: number): void Removes the given flags. Parameters : self : LibLevelGen.Room - no description flagsToClear : number - no description Returns : void","title":"LibLevelGen.Room.clearFlags"},{"location":"modules/Room.lua/#liblevelgenroommaskflags","text":"maskFlags(self: LibLevelGen.Room, flags: number): void Removes all flags apart from the given ones. Parameters : self : LibLevelGen.Room - no description flags : number - no description Returns : void","title":"LibLevelGen.Room.maskFlags"},{"location":"modules/Room.lua/#liblevelgenroomcheckflags","text":"checkFlags(self: LibLevelGen.Room, flags: number): void Checks if the given flags are set. Parameters : self : LibLevelGen.Room - no description flags : number - no description Returns : void","title":"LibLevelGen.Room.checkFlags"},{"location":"modules/Room.lua/#liblevelgenroomsetpaddingtileoverride","text":"setPaddingTileOverride(self: LibLevelGen.Room, data: LibLevelGen.PaddingData): void Set the padding that will be used instead of the one specified by the segment. Parameters : self : LibLevelGen.Room - no description data : LibLevelGen.PaddingData - no description Returns : void","title":"LibLevelGen.Room.setPaddingTileOverride"},{"location":"modules/Room.lua/#liblevelgenroomgetbounds","text":"getBounds(self: LibLevelGen.Room): number[] Get bounds of the room. Parameters : self : LibLevelGen.Room - no description Returns : number[]","title":"LibLevelGen.Room.getBounds"},{"location":"modules/Room.lua/#liblevelgenroomgetrect","text":"getRect(self: LibLevelGen.Room): LibLevelGen.Rect Get rect of the room. Parameters : self : LibLevelGen.Room - no description Returns : LibLevelGen.Rect","title":"LibLevelGen.Room.getRect"},{"location":"modules/Room.lua/#liblevelgenroomsettile","text":"setTile(self: LibLevelGen.Room, x: number, y: number, tileType: string, tileset: string?): void Set tile on the given coordinates. If tileset is not specified, the default one of the segment is used. Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description tileType : string - no description tileset : string? - no description Returns : void","title":"LibLevelGen.Room.setTile"},{"location":"modules/Room.lua/#liblevelgenroomgettile","text":"getTile(self: LibLevelGen.Room, x: number, y: number): LibLevelGen.Tile Get tile on given coordinates Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description Returns : LibLevelGen.Tile","title":"LibLevelGen.Room.getTile"},{"location":"modules/Room.lua/#liblevelgenroomdeletetile","text":"deleteTile(self: LibLevelGen.Room, x: number, y: number): void Delete the given tile (set it to Void pseudotile) Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description Returns : void","title":"LibLevelGen.Room.deleteTile"},{"location":"modules/Room.lua/#liblevelgenroomistilenearwall","text":"isTileNearWall(self: LibLevelGen.Room, tile: LibLevelGen.Tile): boolean Checks if the given tile (assumed to be within this room) is near a wall tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description Returns : boolean","title":"LibLevelGen.Room.isTileNearWall"},{"location":"modules/Room.lua/#liblevelgenroomistilenearfloor","text":"isTileNearFloor(self: LibLevelGen.Room, tile: LibLevelGen.Tile): boolean Checks if the given tile (assumed to be within this room) is near a floor tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description Returns : boolean","title":"LibLevelGen.Room.isTileNearFloor"},{"location":"modules/Room.lua/#liblevelgenroomistilenearborder","text":"isTileNearBorder(self: LibLevelGen.Room, tile: LibLevelGen.Tile): boolean Checks if the given tile (assumed to be within this room) is near the edge of the room. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description Returns : boolean","title":"LibLevelGen.Room.isTileNearBorder"},{"location":"modules/Room.lua/#liblevelgenroomfill","text":"fill(self: LibLevelGen.Room, parameters: LibLevelGen.RoomFillParameters | string Either the RoomFillParameters structure or simply the tile type string.): void Fill the room. Parameters : self : LibLevelGen.Room - no description parameters : LibLevelGen.RoomFillParameters | string Either the RoomFillParameters structure or simply the tile type string. - no description Returns : void","title":"LibLevelGen.Room.fill"},{"location":"modules/Room.lua/#liblevelgenroomborder","text":"border(self: LibLevelGen.Room, parameters: LibLevelGen.RoomBorderParameters | string): void Create a border around the room. Parameters : self : LibLevelGen.Room - no description parameters : LibLevelGen.RoomBorderParameters | string - no description Returns : void","title":"LibLevelGen.Room.border"},{"location":"modules/Room.lua/#liblevelgenroomselecttiles","text":"selectTiles(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements): LibLevelGen.Tile[] Returns all tiles that meet the requirements. Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description Returns : LibLevelGen.Tile[]","title":"LibLevelGen.Room.selectTiles"},{"location":"modules/Room.lua/#liblevelgenroomchooserandomtile","text":"chooseRandomTile(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements): LibLevelGen.Tile Choose a random tile out of ones that meet requirements Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description Returns : LibLevelGen.Tile","title":"LibLevelGen.Room.chooseRandomTile"},{"location":"modules/Room.lua/#liblevelgenroomchooserandomtiles","text":"chooseRandomTiles(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements): LibLevelGen.Tile[] Choose multiple tiles out of ones that meet requirements. Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description Returns : LibLevelGen.Tile[]","title":"LibLevelGen.Room.chooseRandomTiles"},{"location":"modules/Room.lua/#liblevelgenroomplacewalltorch","text":"placeWallTorch(self: LibLevelGen.Room, tile: LibLevelGen.Tile, type: string|nil): void Place a wall torch on the given tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description type : string|nil - no description Returns : void","title":"LibLevelGen.Room.placeWallTorch"},{"location":"modules/Room.lua/#liblevelgenroomplacewalltorches","text":"placeWallTorches(self: LibLevelGen.Room, num: number, type: string|nil): void Place given amount of wall torches randomly on elligible tiles. Parameters : self : LibLevelGen.Room - no description num : number - no description type : string|nil - no description Returns : void","title":"LibLevelGen.Room.placeWallTorches"},{"location":"modules/Room.lua/#liblevelgenroomplaceentity","text":"placeEntity(self: LibLevelGen.Room, tile: LibLevelGen.Tile, entityOrType: string | LibLevelGen.Entity, level: number|nil): void Place entity on the given tile (wrapper around tile:placeEntity that checks if tile is not nil) Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description entityOrType : string | LibLevelGen.Entity - no description level : number|nil - no description Returns : void","title":"LibLevelGen.Room.placeEntity"},{"location":"modules/Room.lua/#liblevelgenroomplaceentityat","text":"placeEntityAt(self: LibLevelGen.Room, x: number, y: number, entityOrType: string | LibLevelGen.Entity, level: number|nil): void Place entity on a tile on given coordinates. Parameters : self : LibLevelGen.Room - no description x : number - no description y : number - no description entityOrType : string | LibLevelGen.Entity - no description level : number|nil - no description Returns : void","title":"LibLevelGen.Room.placeEntityAt"},{"location":"modules/Room.lua/#liblevelgenroomplaceentityrand","text":"placeEntityRand(self: LibLevelGen.Room, requirements: LibLevelGen.TileRequirements, entityOrType: string | LibLevelGen.Entity, level: number | nil): void Place entity on a random tile that meets requrements. Parameters : self : LibLevelGen.Room - no description requirements : LibLevelGen.TileRequirements - no description entityOrType : string | LibLevelGen.Entity - no description level : number | nil - no description Returns : void","title":"LibLevelGen.Room.placeEntityRand"},{"location":"modules/Room.lua/#liblevelgenroomplacewire","text":"placeWire(self: LibLevelGen.Room, tile: LibLevelGen.Tile, connectivity: number Unused, reserved): void Place wire on the given tile. Parameters : self : LibLevelGen.Room - no description tile : LibLevelGen.Tile - no description connectivity : number Unused, reserved - no description Returns : void","title":"LibLevelGen.Room.placeWire"},{"location":"modules/Room.lua/#liblevelgenroommakeexit","text":"makeExit(self: LibLevelGen.Room): void Turn the room into an exit room - set appropriate flags, place the exit stairs and the miniboss. Parameters : self : LibLevelGen.Room - no description Returns : void","title":"LibLevelGen.Room.makeExit"},{"location":"modules/Room.lua/#liblevelgenroomplaceexit","text":"placeExit(self: LibLevelGen.Room): void Place exit somewhere in the room. Parameters : self : LibLevelGen.Room - no description Returns : void","title":"LibLevelGen.Room.placeExit"},{"location":"modules/Room.lua/#liblevelgenroomplaceminiboss","text":"placeMiniboss(self: LibLevelGen.Room, minibosses: table In format {{\"type\", level}, ...}): void Place a miniboss in the room (assumes that the room is an exit room). Parameters : self : LibLevelGen.Room - no description minibosses : table In format {{\"type\", level}, ...} - no description Returns : void","title":"LibLevelGen.Room.placeMiniboss"},{"location":"modules/Room.lua/#liblevelgenroomrandomlyconverttiles","text":"randomlyConvertTiles(self: LibLevelGen.Room, sourceType: string, targetType: string, ratio: number): void Randomly convert tiles from sourceType to targetType, chance of conversion happening is ratio. Parameters : self : LibLevelGen.Room - no description sourceType : string - no description targetType : string - no description ratio : number - no description Returns : void","title":"LibLevelGen.Room.randomlyConvertTiles"},{"location":"modules/Room.lua/#liblevelgenroomconverttiles","text":"convertTiles(self: LibLevelGen.Room, sourceType: string, targetType: string): void Convert all tiles from source type to target type. Parameters : self : LibLevelGen.Room - no description sourceType : string - no description targetType : string - no description Returns : void","title":"LibLevelGen.Room.convertTiles"},{"location":"modules/Room.lua/#liblevelgenroomspreadtile","text":"spreadTile(self: LibLevelGen.Room, targetType: string, requirements: LibLevelGen.TileRequirements, minConvert: number, maxConvert: number, initialTile: LibLevelGen.Tile? can be used to specify initial tile, instead of choosing it randomly): void Choose 1 tile that meets requirement and convert it and other nearby tiles to target type. Parameters : self : LibLevelGen.Room - no description targetType : string - no description requirements : LibLevelGen.TileRequirements - no description minConvert : number - no description maxConvert : number - no description initialTile : LibLevelGen.Tile? can be used to specify initial tile, instead of choosing it randomly - no description Returns : void","title":"LibLevelGen.Room.spreadTile"},{"location":"modules/Room.lua/#liblevelgenroommakeshop","text":"makeShop(self: LibLevelGen.Room, locked: boolean?, force: boolean?): void Make the room a shop. TODO: move into a separate module Parameters : self : LibLevelGen.Room - no description locked : boolean? - no description force : boolean? - no description Returns : void","title":"LibLevelGen.Room.makeShop"},{"location":"modules/Room.lua/#liblevelgenroomfillparameters-extends-liblevelgentiledata","text":"no description Properties : tileset : string - no description type : string - no description rect : LibLevelGen.Rect | nil - no description","title":"LibLevelGen.RoomFillParameters extends LibLevelGen.TileData"},{"location":"modules/Room.lua/#liblevelgenroombordersidecount","text":"no description Properties : top : number - no description bottom : number - no description left : number - no description right : number - no description","title":"LibLevelGen.RoomBorderSideCount"},{"location":"modules/Room.lua/#liblevelgenroomborderparameters-extends-liblevelgentiledata","text":"no description Properties : tileset : string - no description type : string - no description rect : LibLevelGen.Rect - no description sides : LibLevelGen.RoomBorderSideCount - no description","title":"LibLevelGen.RoomBorderParameters extends LibLevelGen.TileData"},{"location":"modules/Room.lua/#enums","text":"","title":"Enums"},{"location":"modules/Room.lua/#roomaxis","text":"no description Entries : VERTICAL HORIZONTAL","title":"room.Axis"},{"location":"modules/Room.lua/#roomflag","text":"Flags which determine the properties of the room Entries : NONE ALLOW_ENEMY ALLOW_CHEST ALLOW_CRATE ALLOW_TRAP ALLOW_TRAVELRUNE ALLOW_SHRINE ALLOW_TORCH ALLOW_TILE_CONVERSION ALLOW_SECRET_FILL EXIT STARTING","title":"room.Flag"},{"location":"modules/Room.lua/#roomtype","text":"no description Entries : REGULAR STARTING EXIT CORRIDOR SECRET SHOP SECRET_SHOP OTHER","title":"room.Type"},{"location":"modules/SecretRoom.lua/","text":"SecretRoom.lua \u00b6 Functions \u00b6 secretRoom.placeSecretRooms \u00b6 secretRoom.placeSecretRooms(segment: LibLevelGen.Segment): LibLevelGen.Room[] Finds suitable locations for secret rooms and places them. Parameters : segment : LibLevelGen.Segment - no description Returns : LibLevelGen.Room[] secretRoom.fillSecretRooms \u00b6 secretRoom.fillSecretRooms(segment: LibLevelGen.Segment, fillType: number? unused, reserved): void Fills secret rooms in the same way necrolevel does. Parameters : segment : LibLevelGen.Segment - no description fillType : number? unused, reserved - no description secretRoom.placeChest \u00b6 secretRoom.placeChest(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description secretRoom.placeHiddenChest \u00b6 secretRoom.placeHiddenChest(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description secretRoom.makeCrateRoom \u00b6 secretRoom.makeCrateRoom(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description secretRoom.makeMouseTrap \u00b6 secretRoom.makeMouseTrap(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description secretRoom.makeTrapRoom \u00b6 secretRoom.makeTrapRoom(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description secretRoom.makeBatCave \u00b6 secretRoom.makeBatCave(room: LibLevelGen.Room, secretBatLevel: number?): void no description Parameters : room : LibLevelGen.Room - no description secretBatLevel : number? - no description secretRoom.makeSkeletonCloset \u00b6 secretRoom.makeSkeletonCloset(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description secretRoom.placeBombOrGold \u00b6 secretRoom.placeBombOrGold(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description secretRoom.placeUrn \u00b6 secretRoom.placeUrn(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"SecretRoom.lua"},{"location":"modules/SecretRoom.lua/#secretroomlua","text":"","title":"SecretRoom.lua"},{"location":"modules/SecretRoom.lua/#functions","text":"","title":"Functions"},{"location":"modules/SecretRoom.lua/#secretroomplacesecretrooms","text":"secretRoom.placeSecretRooms(segment: LibLevelGen.Segment): LibLevelGen.Room[] Finds suitable locations for secret rooms and places them. Parameters : segment : LibLevelGen.Segment - no description Returns : LibLevelGen.Room[]","title":"secretRoom.placeSecretRooms"},{"location":"modules/SecretRoom.lua/#secretroomfillsecretrooms","text":"secretRoom.fillSecretRooms(segment: LibLevelGen.Segment, fillType: number? unused, reserved): void Fills secret rooms in the same way necrolevel does. Parameters : segment : LibLevelGen.Segment - no description fillType : number? unused, reserved - no description","title":"secretRoom.fillSecretRooms"},{"location":"modules/SecretRoom.lua/#secretroomplacechest","text":"secretRoom.placeChest(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.placeChest"},{"location":"modules/SecretRoom.lua/#secretroomplacehiddenchest","text":"secretRoom.placeHiddenChest(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.placeHiddenChest"},{"location":"modules/SecretRoom.lua/#secretroommakecrateroom","text":"secretRoom.makeCrateRoom(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.makeCrateRoom"},{"location":"modules/SecretRoom.lua/#secretroommakemousetrap","text":"secretRoom.makeMouseTrap(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.makeMouseTrap"},{"location":"modules/SecretRoom.lua/#secretroommaketraproom","text":"secretRoom.makeTrapRoom(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.makeTrapRoom"},{"location":"modules/SecretRoom.lua/#secretroommakebatcave","text":"secretRoom.makeBatCave(room: LibLevelGen.Room, secretBatLevel: number?): void no description Parameters : room : LibLevelGen.Room - no description secretBatLevel : number? - no description","title":"secretRoom.makeBatCave"},{"location":"modules/SecretRoom.lua/#secretroommakeskeletoncloset","text":"secretRoom.makeSkeletonCloset(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.makeSkeletonCloset"},{"location":"modules/SecretRoom.lua/#secretroomplacebomborgold","text":"secretRoom.placeBombOrGold(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.placeBombOrGold"},{"location":"modules/SecretRoom.lua/#secretroomplaceurn","text":"secretRoom.placeUrn(room: LibLevelGen.Room): void no description Parameters : room : LibLevelGen.Room - no description","title":"secretRoom.placeUrn"},{"location":"modules/SecretShop.lua/","text":"SecretShop.lua \u00b6 Functions \u00b6 secretShop.createSecretShopLevelNumbers \u00b6 secretShop.createSecretShopLevelNumbers(): table<number,number> no description Returns : table<number,number> secretShop.register \u00b6 secretShop.register(name: string, args: LibLevelGen.SecretShop): number no description Parameters : name : string - no description args : LibLevelGen.SecretShop - no description Returns : number secretShop.getData \u00b6 secretShop.getData(): LibLevelGen.SecretShop no description Returns : LibLevelGen.SecretShop Classes \u00b6 LibLevelGen.SecretShop \u00b6 no description Properties : name : string - friendlyName for logging/error message purposes w : number - (default: 7) - width of the room h : number - (default: 10) - height of the room runeX : number - (default: 3) - x position of the travel rune runeY : number - (default: 7) - y position of the travel rune canHaveSSS : boolean - (default: false) - determines whether a super secret shop can be created above the secret shop tileType : string - (default: StoneWallCracked) - wall where the rune spawns will be converted to this type convertibleTiles : string[] - (default: {\"DirtWall\", \"StoneWall\", \"CatacombWall\"}) - tiles where the rune can be placed. Will be converted to tile specified by tileType. runeType : string - entity type of the shop travel rune clb : fun(room: LibLevelGen.Room) - callback function that gets called with the room as the parameter when the shop is spawned levelRange : number[] - range of level numbers on which the shop is allowed to spawn, in format {minLvl, maxLvl} (inclusive). If not specified, there are no restrictions (apart from not being able to spawn on boss levels) SSScurrency : string - no description Enums \u00b6 secretShop.Type \u00b6 no description Entries : TRANSMOGRIFIER ARENA BLOOD_SHOP GLASS_SHOP FOOD_SHOP CONJURER SHRINER PAWNBROKER","title":"SecretShop.lua"},{"location":"modules/SecretShop.lua/#secretshoplua","text":"","title":"SecretShop.lua"},{"location":"modules/SecretShop.lua/#functions","text":"","title":"Functions"},{"location":"modules/SecretShop.lua/#secretshopcreatesecretshoplevelnumbers","text":"secretShop.createSecretShopLevelNumbers(): table<number,number> no description Returns : table<number,number>","title":"secretShop.createSecretShopLevelNumbers"},{"location":"modules/SecretShop.lua/#secretshopregister","text":"secretShop.register(name: string, args: LibLevelGen.SecretShop): number no description Parameters : name : string - no description args : LibLevelGen.SecretShop - no description Returns : number","title":"secretShop.register"},{"location":"modules/SecretShop.lua/#secretshopgetdata","text":"secretShop.getData(): LibLevelGen.SecretShop no description Returns : LibLevelGen.SecretShop","title":"secretShop.getData"},{"location":"modules/SecretShop.lua/#classes","text":"","title":"Classes"},{"location":"modules/SecretShop.lua/#liblevelgensecretshop","text":"no description Properties : name : string - friendlyName for logging/error message purposes w : number - (default: 7) - width of the room h : number - (default: 10) - height of the room runeX : number - (default: 3) - x position of the travel rune runeY : number - (default: 7) - y position of the travel rune canHaveSSS : boolean - (default: false) - determines whether a super secret shop can be created above the secret shop tileType : string - (default: StoneWallCracked) - wall where the rune spawns will be converted to this type convertibleTiles : string[] - (default: {\"DirtWall\", \"StoneWall\", \"CatacombWall\"}) - tiles where the rune can be placed. Will be converted to tile specified by tileType. runeType : string - entity type of the shop travel rune clb : fun(room: LibLevelGen.Room) - callback function that gets called with the room as the parameter when the shop is spawned levelRange : number[] - range of level numbers on which the shop is allowed to spawn, in format {minLvl, maxLvl} (inclusive). If not specified, there are no restrictions (apart from not being able to spawn on boss levels) SSScurrency : string - no description","title":"LibLevelGen.SecretShop"},{"location":"modules/SecretShop.lua/#enums","text":"","title":"Enums"},{"location":"modules/SecretShop.lua/#secretshoptype","text":"no description Entries : TRANSMOGRIFIER ARENA BLOOD_SHOP GLASS_SHOP FOOD_SHOP CONJURER SHRINER PAWNBROKER","title":"secretShop.Type"},{"location":"modules/Segment.lua/","text":"Segment.lua \u00b6 Functions \u00b6 segment.new \u00b6 segment.new(): LibLevelGen.Segment no description Returns : LibLevelGen.Segment segment.createRandLinkedRoomParameterCombinations \u00b6 segment.createRandLinkedRoomParameterCombinations(parameters: LibLevelGen.RoomGenCombinations): LibLevelGen.RoomGenCombination[] no description Parameters : parameters : LibLevelGen.RoomGenCombinations - no description Returns : LibLevelGen.RoomGenCombination[] Classes \u00b6 LibLevelGen.RoomGenCombination \u00b6 no description Properties : direction : number - no description corridorEntrance : number - no description corridorExit : number - no description corridorThickness : number - no description corridorLength : number - no description roomWidth : number - no description roomHeight : number - no description clearCorridor : boolean - no description entranceTileChances : table<string,number> - no description exitTileChances : table<string,number> - no description LibLevelGen.RoomGenCombinations \u00b6 no description Properties : direction : number[] - no description corridorEntrance : number[] - no description corridorExit : number[] - no description corridorThickness : number[] - no description corridorLength : number[] - no description roomWidth : number[] - no description roomHeight : number[] - no description clearCorridor : boolean - no description entranceTileChances : table<string,number> - no description exitTileChances : table<string,number> - no description LibLegelGen.RoomGenResult \u00b6 no description Properties : axis : number - no description corridorX : number - no description corridorY : number - no description roomCorridorX : number - no description roomCorridorY : number - no description combination : LibLevelGen.RoomGenCombination - no description LibLevelGen.TileData \u00b6 no description Properties : tileset : string - no description type : string - no description LibLevelGen.PaddingExtraTileData extends LibLevelGen.TileData \u00b6 no description Properties : tileset : string - no description type : string - no description ratio : number - no description LibLevelGen.PaddingData \u00b6 no description Properties : mainTile : LibLevelGen.TileData - no description extraTiles : LibLevelGen.PaddingExtraTileData[] - no description count : number - no description LibLevelGen.Rect \u00b6 no description Properties : x : number - no description y : number - no description w : number - no description h : number - no description LibLevelGen.Segment \u00b6 no description Properties : instance : LibLegelGen.Instance The instance that created this segment. - no description rooms : LibLevelGen.Room[] Rooms within this segment. - no description padding : table Wall padding that's applied to rooms when serializing the segment. - no description tileset : string The default tileset that's used if not specified - no description roomBorder : string Tile type that's used for walls in newly created rooms. - no description corridorBorder : string Tile type that's used for walls in newly created corridors. - no description chestsLeft : number chests that have yet to be placed. - no description cratesLeft : number of crates that have yet to be placed. - no description forceSecretRoomBomb : boolean Determines whether 1st secret room will be forcefully filled with a bomb (used when locked shop spawns) - no description Methods : LibLevelGen.Segment.setNumberOfChests \u00b6 setNumberOfChests(self: LibLevelGen.Segment, chests: number): void no description Parameters : self : LibLevelGen.Segment - no description chests : number - no description Returns : void LibLevelGen.Segment.setNumberOfCrates \u00b6 setNumberOfCrates(self: LibLevelGen.Segment, crates: number): void no description Parameters : self : LibLevelGen.Segment - no description crates : number - no description Returns : void LibLevelGen.Segment.setTileset \u00b6 setTileset(self: LibLevelGen.Segment, tilesetName: string): void no description Parameters : self : LibLevelGen.Segment - no description tilesetName : string - no description Returns : void LibLevelGen.Segment.setRoomBorder \u00b6 setRoomBorder(self: LibLevelGen.Segment, roomBorder: string): void no description Parameters : self : LibLevelGen.Segment - no description roomBorder : string - no description Returns : void LibLevelGen.Segment.setCorridorBorder \u00b6 setCorridorBorder(self: LibLevelGen.Segment, corridorBorder: string): void no description Parameters : self : LibLevelGen.Segment - no description corridorBorder : string - no description Returns : void LibLevelGen.Segment.setPadding \u00b6 setPadding(self: LibLevelGen.Segment, data: LibLevelGen.PaddingData): void no description Parameters : self : LibLevelGen.Segment - no description data : LibLevelGen.PaddingData - no description Returns : void LibLevelGen.Segment.getRandomPaddingTile \u00b6 getRandomPaddingTile(self: LibLevelGen.Segment, padding: LibLevelGen.PaddingData): LibLevelGen.TileData no description Parameters : self : LibLevelGen.Segment - no description padding : LibLevelGen.PaddingData - no description Returns : LibLevelGen.TileData LibLevelGen.Segment.createRoom \u00b6 createRoom(self: LibLevelGen.Segment, x: number, y: number, w: number, h: number, flags: number?): LibLevelGen.Room no description Parameters : self : LibLevelGen.Segment - no description x : number - no description y : number - no description w : number - no description h : number - no description flags : number? - no description Returns : LibLevelGen.Room LibLevelGen.Segment.createStartingRoom \u00b6 createStartingRoom(self: LibLevelGen.Segment): LibLevelGen.Room Creates a starting room. Parameters : self : LibLevelGen.Segment - no description Returns : LibLevelGen.Room LibLevelGen.Segment.placeWallTorches \u00b6 placeWallTorches(self: LibLevelGen.Segment, torchesPerRoom: number): void Places specified amount of torches in rooms that allow it. Parameters : self : LibLevelGen.Segment - no description torchesPerRoom : number - no description Returns : void LibLevelGen.Segment.selectRooms \u00b6 selectRooms(self: LibLevelGen.Segment, flags: number): LibLevelGen.Room[] Select rooms that match the given flags. Parameters : self : LibLevelGen.Segment - no description flags : number - no description Returns : LibLevelGen.Room[] LibLevelGen.Segment.iterateRooms \u00b6 iterateRooms(self: LibLevelGen.Segment, flags: number, clb: fun(room: LibLevelGen.Room)): void Call the specified callback function for every room that matches the given flags. Parameters : self : LibLevelGen.Segment - no description flags : number - no description clb : fun(room: LibLevelGen.Room) - no description Returns : void LibLevelGen.Segment.randomlyConvertTiles \u00b6 randomlyConvertTiles(self: LibLevelGen.Segment, sourceType: string, targetType: string, ratio: number): void Randomly convert tiles from sourceType to targetType in rooms that allow tile conversions. Chance to convert a given tile is specified by ratio. Parameters : self : LibLevelGen.Segment - no description sourceType : string - no description targetType : string - no description ratio : number - no description Returns : void LibLevelGen.Segment.createRandLinkedRoom \u00b6 createRandLinkedRoom(self: LibLevelGen.Segment, roomToLink: LibLevelGen.Room, rotateRoom: boolean, orgCombinations: LibLevelGen.RoomGenCombination[]): LibLevelGen.Room no description Parameters : self : LibLevelGen.Segment - no description roomToLink : LibLevelGen.Room - no description rotateRoom : boolean - no description orgCombinations : LibLevelGen.RoomGenCombination[] - no description Returns : LibLevelGen.Room LibLevelGen.Segment.createLinkedRoom \u00b6 createLinkedRoom(self: LibLevelGen.Segment, roomToLink: LibLevelGen.Room, axis: number, corridorX: number, corridorY: number, corridorW: number, corridorH: number, roomCorridorX: number, roomCorridorY: number, roomW: number, roomH: number): LibLevelGen.Room no description Parameters : self : LibLevelGen.Segment - no description roomToLink : LibLevelGen.Room - no description axis : number - no description corridorX : number - no description corridorY : number - no description corridorW : number - no description corridorH : number - no description roomCorridorX : number - no description roomCorridorY : number - no description roomW : number - no description roomH : number - no description Returns : LibLevelGen.Room LibLevelGen.Segment.rectOverlapsWithAnyRoom \u00b6 rectOverlapsWithAnyRoom(self: LibLevelGen.Segment, rect: LibLevelGen.Rect): LibLevelGen.Room Checks whether the given rect overlaps with any room, and returns the 1st room that overlapped. Parameters : self : LibLevelGen.Segment - no description rect : LibLevelGen.Rect - no description Returns : LibLevelGen.Room LibLevelGen.Segment.rectOverlappedRooms \u00b6 rectOverlappedRooms(self: LibLevelGen.Segment, rect: LibLevelGen.Rect): LibLevelGen.Room[] Return all rooms that overlap with the given rect. Parameters : self : LibLevelGen.Segment - no description rect : LibLevelGen.Rect - no description Returns : LibLevelGen.Room[] LibLevelGen.Segment.rectInBounds \u00b6 rectInBounds(self: LibLevelGen.Segment, rect: LibLevelGen.Rect, bounds: number[]): boolean Check whether the given rect is within bounds of the segment. Parameters : self : LibLevelGen.Segment - no description rect : LibLevelGen.Rect - no description bounds : number[] - no description Returns : boolean LibLevelGen.Segment.findBetweenRoomRects \u00b6 findBetweenRoomRects(self: LibLevelGen.Segment, minWidth: number, minHeight: number): LibLevelGen.OverlappedRect[] Find rects between rooms of the segment, of minimum width and height. Parameters : self : LibLevelGen.Segment - no description minWidth : number - no description minHeight : number - no description Returns : LibLevelGen.OverlappedRect[] LibLevelGen.Segment.beetweenRoomRectSidesWithAdjecentRooms \u00b6 beetweenRoomRectSidesWithAdjecentRooms(self: LibLevelGen.Segment, betweenRoomRect: LibLevelGen.OverlappedRect): boolean Counts how many sides of an overlappedRect are adjacent to a room, including other overlapped rects. Parameters : self : LibLevelGen.Segment - no description betweenRoomRect : LibLevelGen.OverlappedRect - no description Returns : boolean LibLevelGen.Segment.beetweenRoomRectAdjecentFakeRooms \u00b6 beetweenRoomRectAdjecentFakeRooms(self: LibLevelGen.Segment): number Counts how many \"fake rooms\" (other overlapped rects) are adjacent to this overlapped rect. Parameters : self : LibLevelGen.Segment - no description Returns : number LibLevelGen.Segment.determineBounds \u00b6 determineBounds(self: LibLevelGen.Segment): number[] Detemine bounds of the segment. Parameters : self : LibLevelGen.Segment - no description Returns : number[] LibLevelGen.Overlaps \u00b6 no description Properties : top : LibLevelGen.Room[] - no description bottom : LibLevelGen.Room[] - no description left : LibLevelGen.Room[] - no description right : LibLevelGen.Room[] - no description LibLevelGen.OverlappedRect extends LibLevelGen.Rect \u00b6 no description Properties : x : number - no description y : number - no description w : number - no description h : number - no description overlaps : LibLevelGen.Overlaps - no description","title":"Segment.lua"},{"location":"modules/Segment.lua/#segmentlua","text":"","title":"Segment.lua"},{"location":"modules/Segment.lua/#functions","text":"","title":"Functions"},{"location":"modules/Segment.lua/#segmentnew","text":"segment.new(): LibLevelGen.Segment no description Returns : LibLevelGen.Segment","title":"segment.new"},{"location":"modules/Segment.lua/#segmentcreaterandlinkedroomparametercombinations","text":"segment.createRandLinkedRoomParameterCombinations(parameters: LibLevelGen.RoomGenCombinations): LibLevelGen.RoomGenCombination[] no description Parameters : parameters : LibLevelGen.RoomGenCombinations - no description Returns : LibLevelGen.RoomGenCombination[]","title":"segment.createRandLinkedRoomParameterCombinations"},{"location":"modules/Segment.lua/#classes","text":"","title":"Classes"},{"location":"modules/Segment.lua/#liblevelgenroomgencombination","text":"no description Properties : direction : number - no description corridorEntrance : number - no description corridorExit : number - no description corridorThickness : number - no description corridorLength : number - no description roomWidth : number - no description roomHeight : number - no description clearCorridor : boolean - no description entranceTileChances : table<string,number> - no description exitTileChances : table<string,number> - no description","title":"LibLevelGen.RoomGenCombination"},{"location":"modules/Segment.lua/#liblevelgenroomgencombinations","text":"no description Properties : direction : number[] - no description corridorEntrance : number[] - no description corridorExit : number[] - no description corridorThickness : number[] - no description corridorLength : number[] - no description roomWidth : number[] - no description roomHeight : number[] - no description clearCorridor : boolean - no description entranceTileChances : table<string,number> - no description exitTileChances : table<string,number> - no description","title":"LibLevelGen.RoomGenCombinations"},{"location":"modules/Segment.lua/#liblegelgenroomgenresult","text":"no description Properties : axis : number - no description corridorX : number - no description corridorY : number - no description roomCorridorX : number - no description roomCorridorY : number - no description combination : LibLevelGen.RoomGenCombination - no description","title":"LibLegelGen.RoomGenResult"},{"location":"modules/Segment.lua/#liblevelgentiledata","text":"no description Properties : tileset : string - no description type : string - no description","title":"LibLevelGen.TileData"},{"location":"modules/Segment.lua/#liblevelgenpaddingextratiledata-extends-liblevelgentiledata","text":"no description Properties : tileset : string - no description type : string - no description ratio : number - no description","title":"LibLevelGen.PaddingExtraTileData extends LibLevelGen.TileData"},{"location":"modules/Segment.lua/#liblevelgenpaddingdata","text":"no description Properties : mainTile : LibLevelGen.TileData - no description extraTiles : LibLevelGen.PaddingExtraTileData[] - no description count : number - no description","title":"LibLevelGen.PaddingData"},{"location":"modules/Segment.lua/#liblevelgenrect","text":"no description Properties : x : number - no description y : number - no description w : number - no description h : number - no description","title":"LibLevelGen.Rect"},{"location":"modules/Segment.lua/#liblevelgensegment","text":"no description Properties : instance : LibLegelGen.Instance The instance that created this segment. - no description rooms : LibLevelGen.Room[] Rooms within this segment. - no description padding : table Wall padding that's applied to rooms when serializing the segment. - no description tileset : string The default tileset that's used if not specified - no description roomBorder : string Tile type that's used for walls in newly created rooms. - no description corridorBorder : string Tile type that's used for walls in newly created corridors. - no description chestsLeft : number chests that have yet to be placed. - no description cratesLeft : number of crates that have yet to be placed. - no description forceSecretRoomBomb : boolean Determines whether 1st secret room will be forcefully filled with a bomb (used when locked shop spawns) - no description Methods :","title":"LibLevelGen.Segment"},{"location":"modules/Segment.lua/#liblevelgensegmentsetnumberofchests","text":"setNumberOfChests(self: LibLevelGen.Segment, chests: number): void no description Parameters : self : LibLevelGen.Segment - no description chests : number - no description Returns : void","title":"LibLevelGen.Segment.setNumberOfChests"},{"location":"modules/Segment.lua/#liblevelgensegmentsetnumberofcrates","text":"setNumberOfCrates(self: LibLevelGen.Segment, crates: number): void no description Parameters : self : LibLevelGen.Segment - no description crates : number - no description Returns : void","title":"LibLevelGen.Segment.setNumberOfCrates"},{"location":"modules/Segment.lua/#liblevelgensegmentsettileset","text":"setTileset(self: LibLevelGen.Segment, tilesetName: string): void no description Parameters : self : LibLevelGen.Segment - no description tilesetName : string - no description Returns : void","title":"LibLevelGen.Segment.setTileset"},{"location":"modules/Segment.lua/#liblevelgensegmentsetroomborder","text":"setRoomBorder(self: LibLevelGen.Segment, roomBorder: string): void no description Parameters : self : LibLevelGen.Segment - no description roomBorder : string - no description Returns : void","title":"LibLevelGen.Segment.setRoomBorder"},{"location":"modules/Segment.lua/#liblevelgensegmentsetcorridorborder","text":"setCorridorBorder(self: LibLevelGen.Segment, corridorBorder: string): void no description Parameters : self : LibLevelGen.Segment - no description corridorBorder : string - no description Returns : void","title":"LibLevelGen.Segment.setCorridorBorder"},{"location":"modules/Segment.lua/#liblevelgensegmentsetpadding","text":"setPadding(self: LibLevelGen.Segment, data: LibLevelGen.PaddingData): void no description Parameters : self : LibLevelGen.Segment - no description data : LibLevelGen.PaddingData - no description Returns : void","title":"LibLevelGen.Segment.setPadding"},{"location":"modules/Segment.lua/#liblevelgensegmentgetrandompaddingtile","text":"getRandomPaddingTile(self: LibLevelGen.Segment, padding: LibLevelGen.PaddingData): LibLevelGen.TileData no description Parameters : self : LibLevelGen.Segment - no description padding : LibLevelGen.PaddingData - no description Returns : LibLevelGen.TileData","title":"LibLevelGen.Segment.getRandomPaddingTile"},{"location":"modules/Segment.lua/#liblevelgensegmentcreateroom","text":"createRoom(self: LibLevelGen.Segment, x: number, y: number, w: number, h: number, flags: number?): LibLevelGen.Room no description Parameters : self : LibLevelGen.Segment - no description x : number - no description y : number - no description w : number - no description h : number - no description flags : number? - no description Returns : LibLevelGen.Room","title":"LibLevelGen.Segment.createRoom"},{"location":"modules/Segment.lua/#liblevelgensegmentcreatestartingroom","text":"createStartingRoom(self: LibLevelGen.Segment): LibLevelGen.Room Creates a starting room. Parameters : self : LibLevelGen.Segment - no description Returns : LibLevelGen.Room","title":"LibLevelGen.Segment.createStartingRoom"},{"location":"modules/Segment.lua/#liblevelgensegmentplacewalltorches","text":"placeWallTorches(self: LibLevelGen.Segment, torchesPerRoom: number): void Places specified amount of torches in rooms that allow it. Parameters : self : LibLevelGen.Segment - no description torchesPerRoom : number - no description Returns : void","title":"LibLevelGen.Segment.placeWallTorches"},{"location":"modules/Segment.lua/#liblevelgensegmentselectrooms","text":"selectRooms(self: LibLevelGen.Segment, flags: number): LibLevelGen.Room[] Select rooms that match the given flags. Parameters : self : LibLevelGen.Segment - no description flags : number - no description Returns : LibLevelGen.Room[]","title":"LibLevelGen.Segment.selectRooms"},{"location":"modules/Segment.lua/#liblevelgensegmentiteraterooms","text":"iterateRooms(self: LibLevelGen.Segment, flags: number, clb: fun(room: LibLevelGen.Room)): void Call the specified callback function for every room that matches the given flags. Parameters : self : LibLevelGen.Segment - no description flags : number - no description clb : fun(room: LibLevelGen.Room) - no description Returns : void","title":"LibLevelGen.Segment.iterateRooms"},{"location":"modules/Segment.lua/#liblevelgensegmentrandomlyconverttiles","text":"randomlyConvertTiles(self: LibLevelGen.Segment, sourceType: string, targetType: string, ratio: number): void Randomly convert tiles from sourceType to targetType in rooms that allow tile conversions. Chance to convert a given tile is specified by ratio. Parameters : self : LibLevelGen.Segment - no description sourceType : string - no description targetType : string - no description ratio : number - no description Returns : void","title":"LibLevelGen.Segment.randomlyConvertTiles"},{"location":"modules/Segment.lua/#liblevelgensegmentcreaterandlinkedroom","text":"createRandLinkedRoom(self: LibLevelGen.Segment, roomToLink: LibLevelGen.Room, rotateRoom: boolean, orgCombinations: LibLevelGen.RoomGenCombination[]): LibLevelGen.Room no description Parameters : self : LibLevelGen.Segment - no description roomToLink : LibLevelGen.Room - no description rotateRoom : boolean - no description orgCombinations : LibLevelGen.RoomGenCombination[] - no description Returns : LibLevelGen.Room","title":"LibLevelGen.Segment.createRandLinkedRoom"},{"location":"modules/Segment.lua/#liblevelgensegmentcreatelinkedroom","text":"createLinkedRoom(self: LibLevelGen.Segment, roomToLink: LibLevelGen.Room, axis: number, corridorX: number, corridorY: number, corridorW: number, corridorH: number, roomCorridorX: number, roomCorridorY: number, roomW: number, roomH: number): LibLevelGen.Room no description Parameters : self : LibLevelGen.Segment - no description roomToLink : LibLevelGen.Room - no description axis : number - no description corridorX : number - no description corridorY : number - no description corridorW : number - no description corridorH : number - no description roomCorridorX : number - no description roomCorridorY : number - no description roomW : number - no description roomH : number - no description Returns : LibLevelGen.Room","title":"LibLevelGen.Segment.createLinkedRoom"},{"location":"modules/Segment.lua/#liblevelgensegmentrectoverlapswithanyroom","text":"rectOverlapsWithAnyRoom(self: LibLevelGen.Segment, rect: LibLevelGen.Rect): LibLevelGen.Room Checks whether the given rect overlaps with any room, and returns the 1st room that overlapped. Parameters : self : LibLevelGen.Segment - no description rect : LibLevelGen.Rect - no description Returns : LibLevelGen.Room","title":"LibLevelGen.Segment.rectOverlapsWithAnyRoom"},{"location":"modules/Segment.lua/#liblevelgensegmentrectoverlappedrooms","text":"rectOverlappedRooms(self: LibLevelGen.Segment, rect: LibLevelGen.Rect): LibLevelGen.Room[] Return all rooms that overlap with the given rect. Parameters : self : LibLevelGen.Segment - no description rect : LibLevelGen.Rect - no description Returns : LibLevelGen.Room[]","title":"LibLevelGen.Segment.rectOverlappedRooms"},{"location":"modules/Segment.lua/#liblevelgensegmentrectinbounds","text":"rectInBounds(self: LibLevelGen.Segment, rect: LibLevelGen.Rect, bounds: number[]): boolean Check whether the given rect is within bounds of the segment. Parameters : self : LibLevelGen.Segment - no description rect : LibLevelGen.Rect - no description bounds : number[] - no description Returns : boolean","title":"LibLevelGen.Segment.rectInBounds"},{"location":"modules/Segment.lua/#liblevelgensegmentfindbetweenroomrects","text":"findBetweenRoomRects(self: LibLevelGen.Segment, minWidth: number, minHeight: number): LibLevelGen.OverlappedRect[] Find rects between rooms of the segment, of minimum width and height. Parameters : self : LibLevelGen.Segment - no description minWidth : number - no description minHeight : number - no description Returns : LibLevelGen.OverlappedRect[]","title":"LibLevelGen.Segment.findBetweenRoomRects"},{"location":"modules/Segment.lua/#liblevelgensegmentbeetweenroomrectsideswithadjecentrooms","text":"beetweenRoomRectSidesWithAdjecentRooms(self: LibLevelGen.Segment, betweenRoomRect: LibLevelGen.OverlappedRect): boolean Counts how many sides of an overlappedRect are adjacent to a room, including other overlapped rects. Parameters : self : LibLevelGen.Segment - no description betweenRoomRect : LibLevelGen.OverlappedRect - no description Returns : boolean","title":"LibLevelGen.Segment.beetweenRoomRectSidesWithAdjecentRooms"},{"location":"modules/Segment.lua/#liblevelgensegmentbeetweenroomrectadjecentfakerooms","text":"beetweenRoomRectAdjecentFakeRooms(self: LibLevelGen.Segment): number Counts how many \"fake rooms\" (other overlapped rects) are adjacent to this overlapped rect. Parameters : self : LibLevelGen.Segment - no description Returns : number","title":"LibLevelGen.Segment.beetweenRoomRectAdjecentFakeRooms"},{"location":"modules/Segment.lua/#liblevelgensegmentdeterminebounds","text":"determineBounds(self: LibLevelGen.Segment): number[] Detemine bounds of the segment. Parameters : self : LibLevelGen.Segment - no description Returns : number[]","title":"LibLevelGen.Segment.determineBounds"},{"location":"modules/Segment.lua/#liblevelgenoverlaps","text":"no description Properties : top : LibLevelGen.Room[] - no description bottom : LibLevelGen.Room[] - no description left : LibLevelGen.Room[] - no description right : LibLevelGen.Room[] - no description","title":"LibLevelGen.Overlaps"},{"location":"modules/Segment.lua/#liblevelgenoverlappedrect-extends-liblevelgenrect","text":"no description Properties : x : number - no description y : number - no description w : number - no description h : number - no description overlaps : LibLevelGen.Overlaps - no description","title":"LibLevelGen.OverlappedRect extends LibLevelGen.Rect"},{"location":"modules/Settings.lua/","text":"Settings.lua \u00b6 Functions \u00b6 levelgenSettings.setDefaultGenerator \u00b6 levelgenSettings.setDefaultGenerator(type: number): void no description Parameters : type : number - no description levelgenSettings.retryOnFailmap \u00b6 levelgenSettings.retryOnFailmap(): boolean no description Returns : boolean levelgenSettings.enableErrorLogging \u00b6 levelgenSettings.enableErrorLogging(): boolean no description Returns : boolean Enums \u00b6 levelgenSettings.Generator \u00b6 no description Entries : DEFAULT NECROLEVEL","title":"Settings.lua"},{"location":"modules/Settings.lua/#settingslua","text":"","title":"Settings.lua"},{"location":"modules/Settings.lua/#functions","text":"","title":"Functions"},{"location":"modules/Settings.lua/#levelgensettingssetdefaultgenerator","text":"levelgenSettings.setDefaultGenerator(type: number): void no description Parameters : type : number - no description","title":"levelgenSettings.setDefaultGenerator"},{"location":"modules/Settings.lua/#levelgensettingsretryonfailmap","text":"levelgenSettings.retryOnFailmap(): boolean no description Returns : boolean","title":"levelgenSettings.retryOnFailmap"},{"location":"modules/Settings.lua/#levelgensettingsenableerrorlogging","text":"levelgenSettings.enableErrorLogging(): boolean no description Returns : boolean","title":"levelgenSettings.enableErrorLogging"},{"location":"modules/Settings.lua/#enums","text":"","title":"Enums"},{"location":"modules/Settings.lua/#levelgensettingsgenerator","text":"no description Entries : DEFAULT NECROLEVEL","title":"levelgenSettings.Generator"},{"location":"modules/Shrine.lua/","text":"Shrine.lua \u00b6 Functions \u00b6 shrine.createShrineLevelNumbers \u00b6 shrine.createShrineLevelNumbers(seenShrines: number[], generatorData: LibLevelGen.Config, rng: LibLevelGen.Rng): table<number,number> no description Parameters : seenShrines : number[] - no description generatorData : LibLevelGen.Config - no description rng : LibLevelGen.Rng - no description Returns : table<number,number> shrine.getElligibleShrines \u00b6 shrine.getElligibleShrines(seenShrines: number[], generatorData: LibLevelGen.Config): number[] no description Parameters : seenShrines : number[] - no description generatorData : LibLevelGen.Config - no description Returns : number[] shrine.markSeen \u00b6 shrine.markSeen(shrineType: number, seenShrines: number[]): void no description Parameters : shrineType : number - no description seenShrines : number[] - no description shrine.checkWasSeen \u00b6 shrine.checkWasSeen(shrineType: number, seenShrines: number[]): boolean no description Parameters : shrineType : number - no description seenShrines : number[] - no description Returns : boolean shrine.register \u00b6 shrine.register(name: string, args: LibLevelGen.Shrine): number no description Parameters : name : string - no description args : LibLevelGen.Shrine - no description Returns : number shrine.getData \u00b6 shrine.getData(type: string): LibLevelGen.Shrine no description Parameters : type : string - no description Returns : LibLevelGen.Shrine Classes \u00b6 LibLevelGen.Shrine \u00b6 no description Properties : name : string - no description xmlID : number - no description old : boolean - no description notAllowedInShriner : boolean - no description Enums \u00b6 shrine.ID \u00b6 TEST SHRINE ENUM COMMENT Entries : BLOOD DARKNESS GLASS PEACE RHYTHM RISK SACRIFICE SPACE WAR NO_RETURN PHASING PACE CHANCE BOSS PAIN UNCERTAINTY shrine.Type \u00b6 no description Entries : BLOOD DARKNESS GLASS PEACE RHYTHM RISK SACRIFICE SPACE WAR NO_RETURN PHASING PACE CHANCE BOSS PAIN UNCERTAINTY","title":"Shrine.lua"},{"location":"modules/Shrine.lua/#shrinelua","text":"","title":"Shrine.lua"},{"location":"modules/Shrine.lua/#functions","text":"","title":"Functions"},{"location":"modules/Shrine.lua/#shrinecreateshrinelevelnumbers","text":"shrine.createShrineLevelNumbers(seenShrines: number[], generatorData: LibLevelGen.Config, rng: LibLevelGen.Rng): table<number,number> no description Parameters : seenShrines : number[] - no description generatorData : LibLevelGen.Config - no description rng : LibLevelGen.Rng - no description Returns : table<number,number>","title":"shrine.createShrineLevelNumbers"},{"location":"modules/Shrine.lua/#shrinegetelligibleshrines","text":"shrine.getElligibleShrines(seenShrines: number[], generatorData: LibLevelGen.Config): number[] no description Parameters : seenShrines : number[] - no description generatorData : LibLevelGen.Config - no description Returns : number[]","title":"shrine.getElligibleShrines"},{"location":"modules/Shrine.lua/#shrinemarkseen","text":"shrine.markSeen(shrineType: number, seenShrines: number[]): void no description Parameters : shrineType : number - no description seenShrines : number[] - no description","title":"shrine.markSeen"},{"location":"modules/Shrine.lua/#shrinecheckwasseen","text":"shrine.checkWasSeen(shrineType: number, seenShrines: number[]): boolean no description Parameters : shrineType : number - no description seenShrines : number[] - no description Returns : boolean","title":"shrine.checkWasSeen"},{"location":"modules/Shrine.lua/#shrineregister","text":"shrine.register(name: string, args: LibLevelGen.Shrine): number no description Parameters : name : string - no description args : LibLevelGen.Shrine - no description Returns : number","title":"shrine.register"},{"location":"modules/Shrine.lua/#shrinegetdata","text":"shrine.getData(type: string): LibLevelGen.Shrine no description Parameters : type : string - no description Returns : LibLevelGen.Shrine","title":"shrine.getData"},{"location":"modules/Shrine.lua/#classes","text":"","title":"Classes"},{"location":"modules/Shrine.lua/#liblevelgenshrine","text":"no description Properties : name : string - no description xmlID : number - no description old : boolean - no description notAllowedInShriner : boolean - no description","title":"LibLevelGen.Shrine"},{"location":"modules/Shrine.lua/#enums","text":"","title":"Enums"},{"location":"modules/Shrine.lua/#shrineid","text":"TEST SHRINE ENUM COMMENT Entries : BLOOD DARKNESS GLASS PEACE RHYTHM RISK SACRIFICE SPACE WAR NO_RETURN PHASING PACE CHANCE BOSS PAIN UNCERTAINTY","title":"shrine.ID"},{"location":"modules/Shrine.lua/#shrinetype","text":"no description Entries : BLOOD DARKNESS GLASS PEACE RHYTHM RISK SACRIFICE SPACE WAR NO_RETURN PHASING PACE CHANCE BOSS PAIN UNCERTAINTY","title":"shrine.Type"},{"location":"modules/Util.lua/","text":"Util.lua \u00b6 levelGenUtil.TileRequirements helper table \u00b6 levelGenUtil.TileRequirements = { Enemy = { Generic = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, }, NotNearWall = { isFloor = true, levelExit = false, hasEntity = false, nearWall = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, }, MovingSlime = { isFloor = true, levelExit = false, hasEntity = false, nearWall = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, }, OnWall = { hasEntity = false, isWall = true, }, OnWire = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = true } }, Trap = { Generic = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = false, noWallTallSprite = true } }, Shrine = { Generic = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, nearWall = false, wire = false } }, Terrain = { Hazard = { isFloor = true, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, levelExit = false }, Exit = { isFloor = true, adjacentEntrance = false, } }, Loot = { Generic = { isFloor = true, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = false, levelExit = false }, Chest = { isFloor = true, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = false, levelExit = false } }, }","title":"Util.lua"},{"location":"modules/Util.lua/#utillua","text":"","title":"Util.lua"},{"location":"modules/Util.lua/#levelgenutiltilerequirements-helper-table","text":"levelGenUtil.TileRequirements = { Enemy = { Generic = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, }, NotNearWall = { isFloor = true, levelExit = false, hasEntity = false, nearWall = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, }, MovingSlime = { isFloor = true, levelExit = false, hasEntity = false, nearWall = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, }, OnWall = { hasEntity = false, isWall = true, }, OnWire = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = true } }, Trap = { Generic = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = false, noWallTallSprite = true } }, Shrine = { Generic = { isFloor = true, levelExit = false, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, nearWall = false, wire = false } }, Terrain = { Hazard = { isFloor = true, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, levelExit = false }, Exit = { isFloor = true, adjacentEntrance = false, } }, Loot = { Generic = { isFloor = true, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = false, levelExit = false }, Chest = { isFloor = true, hasEntity = false, adjacentEntrance = false, notCollision = collision.Group.UNSAFE, wire = false, levelExit = false } }, }","title":"levelGenUtil.TileRequirements  helper table"}]}